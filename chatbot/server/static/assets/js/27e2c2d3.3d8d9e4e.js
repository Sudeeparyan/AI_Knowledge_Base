"use strict";(self.webpackChunksudeeparyan_knowledgebase=self.webpackChunksudeeparyan_knowledgebase||[]).push([[4547],{69393:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var r=n(74848),s=n(28453);const i={},o=void 0,a={id:"DevOps/MeasuringSoftwareEngineeringPractics",title:"MeasuringSoftwareEngineeringPractics",description:"Measuring Software Engineering Practices",source:"@site/docs/DevOps/MeasuringSoftwareEngineeringPractics.md",sourceDirName:"DevOps",slug:"/DevOps/MeasuringSoftwareEngineeringPractics",permalink:"/docs/DevOps/MeasuringSoftwareEngineeringPractics",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"devOpsSidebar",previous:{title:"GITVersionControl",permalink:"/docs/DevOps/GITVersionControl"},next:{title:"TestAutomation",permalink:"/docs/DevOps/TestAutomation"}},d={},l=[{value:"Measuring Software Engineering Practices",id:"measuring-software-engineering-practices",level:3},{value:"Requirement Documentation",id:"requirement-documentation",level:2},{value:"Acceptance Table Definition",id:"acceptance-table-definition",level:2},{value:"Technical Documentation",id:"technical-documentation",level:2},{value:"Version Control",id:"version-control",level:2},{value:"Trunk Based Development",id:"trunk-based-development",level:2},{value:"Trunk Based Development References",id:"trunk-based-development-references",level:3},{value:"Code Review",id:"code-review",level:2},{value:"Code Review References",id:"code-review-references",level:3},{value:"Test Automation",id:"test-automation",level:2},{value:"Test Automation References",id:"test-automation-references",level:3},{value:"Continuous Integration",id:"continuous-integration",level:2},{value:"Continuous Integration References",id:"continuous-integration-references",level:3},{value:"Deployment Automation",id:"deployment-automation",level:2},{value:"Deployment Automation References",id:"deployment-automation-references",level:3}];function c(e){const t={a:"a",br:"br",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.h3,{id:"measuring-software-engineering-practices",children:"Measuring Software Engineering Practices"}),"\n",(0,r.jsxs)(t.p,{children:["As we adopt the\n",(0,r.jsx)(t.a,{href:"./SoftwareEngineeringPractices.md",children:"Software Engineering Practices"})," in projects,\nIt is important to have quantitative and qualitative metrics to measure the\neffectiveness of the practice."]}),"\n",(0,r.jsxs)(t.p,{children:["The metrics outlined below will serve as a baseline indicator for the\n",(0,r.jsx)(t.code,{children:"Tech Leads"})," to evaluate the effectiveness of these practices in a project and\nhelp progress towards the the desired end goal."]}),"\n",(0,r.jsx)(t.p,{children:"In addition to these metrics, project teams may need to identify or develop\ncustom metrics to track effectiveness specific to their projects."}),"\n",(0,r.jsx)(t.h2,{id:"requirement-documentation",children:"Requirement Documentation"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Factor to test"}),(0,r.jsx)(t.th,{children:"What to measure"}),(0,r.jsx)(t.th,{children:"Goal"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Development features with requirement documentation"}),(0,r.jsx)(t.td,{children:"Measure the percentage of features that contains requirement documentation"}),(0,r.jsx)(t.td,{children:"All the project features should contain detailed requirement documentation before start of development"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Requirements approval from stakeholders"}),(0,r.jsx)(t.td,{children:"Measure the percentage of requirement documentation that has explicit written approval from all stakeholders & customers"}),(0,r.jsx)(t.td,{children:"Requirement documentation should be reviewed & approved explicitly by stakeholders before development"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Requirements scope change after development"}),(0,r.jsx)(t.td,{children:"Measure the number of instances where the feature requirement changed after development started. Changes should reduce over time & tend towards zero"}),(0,r.jsx)(t.td,{children:"Requirement scope change should be minimal during implementation. If changes during development continue as a trend. Retrospect & improve on the requirement gathering & documentation process"})]})]})]}),"\n",(0,r.jsx)(t.h2,{id:"acceptance-table-definition",children:"Acceptance Table Definition"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Factor to test"}),(0,r.jsx)(t.th,{children:"What to measure"}),(0,r.jsx)(t.th,{children:"Goal"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Development features with acceptance table"}),(0,r.jsx)(t.td,{children:"Measure the percentage of features that have acceptance tables created before the start of development"}),(0,r.jsx)(t.td,{children:"All the project features should contain detailed acceptance tables created before the start of development"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"New tests added to acceptance table after development started"}),(0,r.jsx)(t.td,{children:"Measure the number of instances where new tests gets added to acceptance table after development started"}),(0,r.jsx)(t.td,{children:"Newly added tests should be minimal & tend towards zero. If the trend continues, retrospect & improve on defining the acceptance tables better"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Automation tests written for acceptance table"}),(0,r.jsx)(t.td,{children:"Measure the percentage of automation tests written against manual tests"}),(0,r.jsx)(t.td,{children:"Calibrate the test strategy & improve on areas that have repeated manual test efforts"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Time taken to run the manual tests in acceptance table"}),(0,r.jsx)(t.td,{children:"Measure the time taken to run the entire suite of manual tests in acceptance table for a feature"}),(0,r.jsx)(t.td,{children:"Analyze tests that increase the total time taken to run the test suite and consider automating time consuming test cases"})]})]})]}),"\n",(0,r.jsx)(t.h2,{id:"technical-documentation",children:"Technical Documentation"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Factor to test"}),(0,r.jsx)(t.th,{children:"What to measure"}),(0,r.jsx)(t.th,{children:"Goal"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Time taken to onboard new developer into project codebase"}),(0,r.jsx)(t.td,{children:"Measure the average time taken by technical leads & peer developers to onboard a new developer into the project codebase"}),(0,r.jsx)(t.td,{children:"Redundant efforts in the onboarding of a developer will impact productivity. Identify gaps in technical documentation & improve on them to reduce redundant efforts"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Time taken to work through ambiguity in technical documentation"}),(0,r.jsx)(t.td,{children:"Measure the average additional time taken by individuals to work through ambiguity (reaching out to peers for more details, exploration or resolving issues) due to poor quality technical documentation"}),(0,r.jsx)(t.td,{children:"The technical documentation must be clear & concise to enable quick understanding for the intended audience. Improve the quality of documentation to resolve ambiguity & reduce time"})]})]})]}),"\n",(0,r.jsx)(t.h2,{id:"version-control",children:"Version Control"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Factor to test"}),(0,r.jsx)(t.th,{children:"What to measure"}),(0,r.jsx)(t.th,{children:"Goal"})]})}),(0,r.jsx)(t.tbody,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Time taken to locate & use project related resource"}),(0,r.jsx)(t.td,{children:"Measure the average time taken to locate project resources like application code, requirement documents, design documents, release notes, handbooks, configuration files, and scripts (database scripts, environment scripts) & if needed transfer resources to the version control system to enable centralization and quick access"}),(0,r.jsx)(t.td,{children:"Ensure that all essential project-related resources are available within the version control system. Reduce the time taken to search & locate them in various tools"})]})})]}),"\n",(0,r.jsx)(t.h2,{id:"trunk-based-development",children:"Trunk Based Development"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Factor to test"}),(0,r.jsx)(t.th,{children:"What to measure"}),(0,r.jsx)(t.th,{children:"Goal"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Number of active branches on the application code repository"}),(0,r.jsx)(t.td,{children:"Measure how many active branches exist in the application repository and incrementally cut down to bring it close to the desired goal"}),(0,r.jsx)(t.td,{children:"Three or fewer active branches or it should not be more than number of developers in the team"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsxs)(t.td,{children:["Number of pull requests merged into ",(0,r.jsx)(t.code,{children:"main"})," for a given period"]}),(0,r.jsxs)(t.td,{children:["Measure how many pull requests are merged into the ",(0,r.jsx)(t.code,{children:"main"})," branch for a given period (preferably weekly)"]}),(0,r.jsxs)(t.td,{children:["Pull requests merged per week should be consistent with the team's ",(0,r.jsx)(t.a,{href:"#trunk-based-development-references",children:"pull request velocity"}),". Sudden spikes indicate drift in ",(0,r.jsx)(t.a,{href:"#trunk-based-development-references",children:"lead time for changes"})]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Branches following naming standard"}),(0,r.jsxs)(t.td,{children:["Measure how many branches don't follow the recommended naming standard ",(0,r.jsx)(t.code,{children:"users/<firstname-lastname>/<task-name>"})]}),(0,r.jsxs)(t.td,{children:["All user-created branches must follow the recommended naming standard to identify who is accountable for merging them to ",(0,r.jsx)(t.code,{children:"main"})]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Code freeze periods"}),(0,r.jsxs)(t.td,{children:["Measure how many days ",(0,r.jsx)(t.code,{children:"the team"})," refrains from merging code to ",(0,r.jsx)(t.code,{children:"main"})," and how long these code freezes lasts"]}),(0,r.jsx)(t.td,{children:"No code freeze should happen which blocks the active development merges"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsxs)(t.td,{children:["Frequency of merging branches to ",(0,r.jsx)(t.code,{children:"main"})]}),(0,r.jsxs)(t.td,{children:["Measure the percentage of branches that are merged to ",(0,r.jsx)(t.code,{children:"main"})," everyday out of all active branches"]}),(0,r.jsxs)(t.td,{children:["Merge branches to ",(0,r.jsx)(t.code,{children:"main"})," at least once a day"]})]})]})]}),"\n",(0,r.jsx)(t.h3,{id:"trunk-based-development-references",children:"Trunk Based Development References"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["Read more about\n",(0,r.jsx)(t.a,{href:"https://dora.dev/devops-capabilities/technical/trunk-based-development/",children:"trunk based development."})]}),"\n",(0,r.jsxs)(t.li,{children:["Read more about\n",(0,r.jsx)(t.a,{href:"https://plandek.com/blog/lead-time-for-changes/",children:"lead time for changes."})]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Pull request velocity :"})," Average number of pull request observed",(0,r.jsx)(t.br,{}),"\n","in a given period of time."]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"code-review",children:"Code Review"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Factor to test"}),(0,r.jsx)(t.th,{children:"What to measure"}),(0,r.jsx)(t.th,{children:"Goal"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Volume of changes in a pull request"}),(0,r.jsx)(t.td,{children:"Measure how many files & lines have changed in the pull request (includes line addition, modification and removal )"}),(0,r.jsxs)(t.td,{children:["The pull request should be ",(0,r.jsx)(t.a,{href:"https://google.github.io/eng-practices/review/developer/small-cls.html",children:"small in size"})]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Pull request first review response time"}),(0,r.jsxs)(t.td,{children:["Measure the time duration between the first review vote and the pull request creation. Reduce this time towards the desired goal. ",(0,r.jsx)(t.code,{children:"Time taken = (PR first review vote time - PR created time )"})]}),(0,r.jsx)(t.td,{children:"Code reviews should happen shortly after they arrive (If reviewers are not engaged in a focused task). Acceptable time frame to respond should be within one business day"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Pull request approval time"}),(0,r.jsxs)(t.td,{children:["Measure the time duration between the pull request approval (from all required reviewers) and the pull request creation. Reduce this time towards the desired goal. ",(0,r.jsx)(t.code,{children:"Time taken = ( Time of PR approval from all required reviewers - PR created time )"})]}),(0,r.jsx)(t.td,{children:"Review (or multiple reviews) and approval(s) by all required reviewers should be completed within two business days"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Pull request merge time"}),(0,r.jsxs)(t.td,{children:["Measure the time duration between the pull request merge time and the pull request creation. Reduce this time towards the desired goal. ",(0,r.jsx)(t.code,{children:"Time taken = ( PR merge time - PR created time)"})]}),(0,r.jsx)(t.td,{children:"After approval aim to merge within one business day"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Pull request votes"}),(0,r.jsx)(t.td,{children:"Measure how many blocking votes (wait for author, rejected) exists the pull request & consistently record this trend over a period"}),(0,r.jsx)(t.td,{children:"Identify potential gaps in the requirement, design or implementation & increase pull request quality through continuous improvement"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsxs)(t.td,{children:["Pull request ",(0,r.jsx)(t.code,{children:"nit"})," comments"]}),(0,r.jsxs)(t.td,{children:["Measure how many ",(0,r.jsx)(t.code,{children:"nit"})," comments exists in the pull request & consistently record this trend over a period"]}),(0,r.jsx)(t.td,{children:"Get insights about pull request code quality & gaps in existing automated tooling like - static code analysis, linting, formatting, checklists etc"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsxs)(t.td,{children:["Pull request ",(0,r.jsx)(t.code,{children:"major"})," comments"]}),(0,r.jsxs)(t.td,{children:["Measure how many ",(0,r.jsx)(t.code,{children:"major"})," comments exists in the pull request & consistently record this trend over a period"]}),(0,r.jsx)(t.td,{children:"Get insights about pull request code quality & gaps in software foundation principles. Reduce the gaps by continuous improvement and upskilling"})]})]})]}),"\n",(0,r.jsx)(t.h3,{id:"code-review-references",children:"Code Review References"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["Read about\n",(0,r.jsx)(t.a,{href:"https://google.github.io/eng-practices/",children:"Google code review practices."})]}),"\n",(0,r.jsxs)(t.li,{children:["Read more about\n",(0,r.jsx)(t.a,{href:"https://google.github.io/eng-practices/review/reviewer/comments.html",children:"pull request comments"})]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"test-automation",children:"Test Automation"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Factor to test"}),(0,r.jsx)(t.th,{children:"What to measure"}),(0,r.jsx)(t.th,{children:"Goal"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Time taken for automation tests to run"}),(0,r.jsx)(t.td,{children:"Measure the time taken to run the unit test, integration test & end to end test"}),(0,r.jsx)(t.td,{children:"The automation tests run should complete within few mins, with an upper limit of 15 minutes. If it takes longer, audit the tests & optimize for faster runs"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Number of bugs found in automation tests"}),(0,r.jsx)(t.td,{children:"Measure the number of bugs found in the automation tests over a period"}),(0,r.jsx)(t.td,{children:'More bugs are found in "cheaper" test phases, add automated tests for the bugs find during exploratory testing & production, add unit tests to catch bugs discovered in acceptance tests'})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Test data maintenance"}),(0,r.jsx)(t.td,{children:"Measure the time taken to generate test data & cleanup test data for automation tests run"}),(0,r.jsx)(t.td,{children:"Time taken for test data maintenance should not be more than few minutes, with an upper limit of 5 minutes. If it takes longer, audit your test data maintenance strategy for improvements"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Automation tests that represent real defect"}),(0,r.jsx)(t.td,{children:"Measure the percentage of test failures that represent a real defect in product"}),(0,r.jsx)(t.td,{children:"Test failures should always indicate a real defect in the product"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Automation tests that represent intermittent failures"}),(0,r.jsx)(t.td,{children:"Measure the number of intermittent or random test failures which don't represent real defect (test environment failures, poorly written test etc) over a period"}),(0,r.jsx)(t.td,{children:"Intermittent failures caused by automation tests should be zero & test failures should always indicate a real defect in the product"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Time taken to fix acceptance test failures"}),(0,r.jsx)(t.td,{children:"Measure the time taken to fix the acceptance test failures over a period"}),(0,r.jsx)(t.td,{children:"Automated tests should be easy to fix. Time taken to fix should reduce over a period."})]})]})]}),"\n",(0,r.jsx)(t.h3,{id:"test-automation-references",children:"Test Automation References"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["Read more about\n",(0,r.jsx)(t.a,{href:"https://dora.dev/devops-capabilities/technical/test-automation/",children:"test automation"})]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"continuous-integration",children:"Continuous Integration"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Factor to test"}),(0,r.jsx)(t.th,{children:"What to measure"}),(0,r.jsx)(t.th,{children:"Goal"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsxs)(t.td,{children:["Code commits in ",(0,r.jsx)(t.code,{children:"main"})," that trigger the software build process"]}),(0,r.jsx)(t.td,{children:"Measure the percentage of code commits that result in a software build without manual intervention"}),(0,r.jsx)(t.td,{children:"Automated scripts should be used to create the software build and the software build should to ready to deploy on any environment"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Time taken for the software build"}),(0,r.jsx)(t.td,{children:"Measure the time duration needed to successfully build the software"}),(0,r.jsx)(t.td,{children:"Acceptable time for software build process should be within 5 minutes"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsxs)(t.td,{children:["Code commits in ",(0,r.jsx)(t.code,{children:"main"})," that trigger a series of automated tests"]}),(0,r.jsx)(t.td,{children:"Measure the percentage of code commits that result in a suite of automated tests (unit & integration tests) being run without manual intervention."}),(0,r.jsx)(t.td,{children:"Ensure all portions of the code that could be impacted (directly or indirectly) have passing automated testing after every commit"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Time taken for the automated tests to run"}),(0,r.jsx)(t.td,{children:"Measure the time duration required to run all mandatory automated tests in pipeline"}),(0,r.jsx)(t.td,{children:"Automated tests should not take more than a few minutes to run, with an upper limit of 10 minutes. If it takes longer, audit your test for efficiency & architecture improvements"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Automated builds and tests are executed successfully"}),(0,r.jsx)(t.td,{children:"Measure the percentage of automated builds and the percentage of automated tests (unit & integration tests) that are executed successfully in a given period ."}),(0,r.jsx)(t.td,{children:"Evaluate the efficiency & health of the pipeline by monitoring the success rates. Higher success rates contribute to faster development lifecycle"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsxs)(t.td,{children:["Time taken to resolve the pipeline failures in ",(0,r.jsx)(t.code,{children:"trunk"})]}),(0,r.jsxs)(t.td,{children:["Measure the time duration between the pipeline failure and the pipeline success in ",(0,r.jsx)(t.code,{children:"trunk"})]}),(0,r.jsxs)(t.td,{children:["Fixing failures or reverting failures in ",(0,r.jsx)(t.code,{children:"trunk"})," should take priority over any other work"]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Time taken for the CI pipeline run"}),(0,r.jsx)(t.td,{children:"Measure the total time taken to run all the steps in CI pipeline and optimize it to reduce time"}),(0,r.jsx)(t.td,{children:"The pipeline run should complete within few mins, with an upper limit of 15 minutes. If it takes longer, audit the pipeline steps & optimize for faster runs"})]})]})]}),"\n",(0,r.jsx)(t.h3,{id:"continuous-integration-references",children:"Continuous Integration References"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["Read more about\n",(0,r.jsx)(t.a,{href:"https://dora.dev/devops-capabilities/technical/continuous-integration/",children:"continuous integration"})]}),"\n"]}),"\n",(0,r.jsx)(t.h2,{id:"deployment-automation",children:"Deployment Automation"}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{children:"Factor to test"}),(0,r.jsx)(t.th,{children:"What to measure"}),(0,r.jsx)(t.th,{children:"Goal"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Manual steps involved in deployment process"}),(0,r.jsx)(t.td,{children:"Measure the number of manual steps involved in deployment process & incrementally bring it close towards the desired goal"}),(0,r.jsx)(t.td,{children:"Manual steps in deployment process increases the deployment time & opportunity for error. Reduce the manual steps to zero & automate deployment to any environments (testing, production) with push of a button"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Time taken to run deployment pipeline"}),(0,r.jsx)(t.td,{children:"Measure the time duration needed to successfully run the deployment pipeline"}),(0,r.jsx)(t.td,{children:"Deployment pipeline run should be completed within few mins, with an upper limit of 10 minutes. If it takes longer, audit the pipeline steps & optimize for faster runs"})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{children:"Time taken to rollback from deployment failure"}),(0,r.jsx)(t.td,{children:"Measure the time taken to rollback from a deployment failure when the current deployment fails"}),(0,r.jsx)(t.td,{children:"Get insights about how quickly the system recover from deployment failures & optimize to improve the rollback speed. Faster rollback will reduce the downtime experienced by users or customers"})]})]})]}),"\n",(0,r.jsx)(t.h3,{id:"deployment-automation-references",children:"Deployment Automation References"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:["Read more about\n",(0,r.jsx)(t.a,{href:"https://dora.dev/devops-capabilities/technical/deployment-automation/",children:"deployment automation"})]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var r=n(96540);const s={},i=r.createContext(s);function o(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);
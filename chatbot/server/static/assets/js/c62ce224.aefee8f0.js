"use strict";(self.webpackChunksudeeparyan_knowledgebase=self.webpackChunksudeeparyan_knowledgebase||[]).push([[9146],{66378:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>h,frontMatter:()=>a,metadata:()=>o,toc:()=>d});var t=i(74848),s=i(28453);const a={},r="Clean Code",o={id:"CodingStandards/Books/Clean-code",title:"Clean-code",description:"This is a book review on 'Clean Code', by Robert C. Martin.",source:"@site/docs/CodingStandards/Books/Clean-code.md",sourceDirName:"CodingStandards/Books",slug:"/CodingStandards/Books/Clean-code",permalink:"/docs/CodingStandards/Books/Clean-code",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"codingStandardsSidebar",previous:{title:"Books",permalink:"/docs/category/books"},next:{title:"The Pragmatic Programmer",permalink:"/docs/CodingStandards/Books/PragmaticProgrammer"}},l={},d=[{value:"Foreword",id:"foreword",level:2},{value:"Introduction",id:"introduction",level:2},{value:"Meaningful Names",id:"meaningful-names",level:2},{value:"Highlights",id:"highlights",level:3},{value:"Summary",id:"summary",level:3},{value:"Experience",id:"experience",level:3},{value:"Naming the child",id:"naming-the-child",level:4},{value:"Q&amp;A",id:"qa",level:3},{value:"Functions",id:"functions",level:2},{value:"Highlights",id:"highlights-1",level:3},{value:"Summary",id:"summary-1",level:3},{value:"Experience",id:"experience-1",level:3},{value:"Ordering the cake for the baby",id:"ordering-the-cake-for-the-baby",level:4},{value:"Deal with software projects",id:"deal-with-software-projects",level:4},{value:"Q&amp;A",id:"qa-1",level:3},{value:"Take Away from session",id:"take-away-from-session",level:2},{value:"Chapter 1 - Clean code",id:"chapter-1---clean-code",level:2},{value:"Chapter 2 - Meaningful Names",id:"chapter-2---meaningful-names",level:2},{value:"Chapter 3 - Functions",id:"chapter-3---functions",level:2},{value:"Chapter 4 - Comments",id:"chapter-4---comments",level:2},{value:"Chapter 5 - Formatting",id:"chapter-5---formatting",level:2},{value:"Chapter 6 - Objects and Data Structures",id:"chapter-6---objects-and-data-structures",level:2},{value:"Chapter 7 - Error Handling",id:"chapter-7---error-handling",level:2},{value:"Chapter 8 - Boundaries",id:"chapter-8---boundaries",level:2},{value:"Using Third-Party Code",id:"using-third-party-code",level:3},{value:"Exploring and Learning Boundaries",id:"exploring-and-learning-boundaries",level:3},{value:"Using Code That Does Not Yet Exist",id:"using-code-that-does-not-yet-exist",level:3}];function c(e){const n={a:"a",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"clean-code",children:"Clean Code"})}),"\n",(0,t.jsx)(n.p,{children:"This is a book review on 'Clean Code', by Robert C. Martin."}),"\n",(0,t.jsxs)(n.p,{children:["[[",(0,t.jsx)(n.em,{children:"TOC"}),"]]"]}),"\n",(0,t.jsx)(n.h2,{id:"foreword",children:"Foreword"}),"\n",(0,t.jsxs)(n.p,{children:["\" As for this book, it is the best pragmatic application of 'Lean' principles to\nsoftware I have ever seen in print\" ",(0,t.jsx)(n.code,{children:"James O. Coplien"})]}),"\n",(0,t.jsx)(n.h2,{id:"introduction",children:"Introduction"}),"\n",(0,t.jsx)(n.p,{children:"Clean code is a handbook of agile software craftsmanship. This document\nsummarizes the real life and project examples, suggestions on how clean code has\nimproved the programmers life."}),"\n",(0,t.jsx)(n.p,{children:"Note: The current document includes review until chapter 3 - Functions."}),"\n",(0,t.jsx)(n.h2,{id:"meaningful-names",children:"Meaningful Names"}),"\n",(0,t.jsx)(n.h3,{id:"highlights",children:"Highlights"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Naming Kid is fun"}),"\n",(0,t.jsx)(n.li,{children:"Weird to have names"}),"\n",(0,t.jsx)(n.li,{children:"Q&A"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"summary",children:"Summary"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Avoid using Hungarian notation (Name starting with the type of the\nvariable). This may lead to confusion and reduce the benefit of the code\neditor. It is really weird for a new programmer to read your code having\nsome variable name as below :"}),"\n",(0,t.jsx)(n.p,{children:"list_i = [0, 1, 2]"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Spend enough time in naming. Variable can be named based on its intentions\nand goal."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Avoid adding iterators to have unique names. It doesn't make sense and it\nreduces the readability."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:'Follow the "Boy Scout" Rule. Boy Scout Rule can be summarized as:'}),"\n",(0,t.jsx)(n.p,{children:"'Leave your code better than you found it'."}),"\n",(0,t.jsx)(n.p,{children:"Don't hesitate to rename old functions or variables when you find duplicate\nnames."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Pick one kind of word per concept."}),"\n",(0,t.jsx)(n.p,{children:"For example, name as function as :"}),"\n",(0,t.jsx)(n.p,{children:"get_student(); get_teacher()"}),"\n",(0,t.jsx)(n.p,{children:"Don't name as follows :"}),"\n",(0,t.jsx)(n.p,{children:"get_student(): fetch_teacher()"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Use searchable names. Let's say we have to check for age limit of value 18.\nInstead of using the value directly in condition statements, we can assign a\nConstant name as follows which is more searchable."}),"\n",(0,t.jsx)(n.p,{children:"'ELIGIBLE_AGE' = 18"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"experience",children:"Experience"}),"\n",(0,t.jsx)(n.h4,{id:"naming-the-child",children:"Naming the child"}),"\n",(0,t.jsx)(n.p,{children:"If you got a Kid, you got to name for sure. Naming get's complicated with so\nmuch constraints. Because the naming involves many people and factors. A parent\nhas to deal with following factors."}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Astrologer suggested a small list of starting letters, while all the\nstarting letters mentioned is tough to be formed into a meaningful name. It\nis not aligned with their interest."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"It should be a boy name."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"It should not be too long or difficult to pronounce."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Relatives suggested some names, they had to consider them in mind too."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Hence a good amount of time is spent on finding out the name satisfying most of\nthe constraints."}),"\n",(0,t.jsx)(n.h3,{id:"qa",children:"Q&A"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Does naming meaningfully necessary in graphical program like LabVIEW?"}),"\n",(0,t.jsx)(n.p,{children:"Yes, it is another programming. It involves naming the variables, UI\nelements ans SubVI's."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"What should we do in case the customer wants name to be short than being big\nand meaningful?"}),"\n",(0,t.jsx)(n.p,{children:"We can't completely avoid meaningful names. We shall reduce the size and follow same standard across the team."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"I have to get a user input in python. I get the input as string and\nconverting it to an integer for calculation purpose. How should I name in\nthis case?"}),"\n",(0,t.jsx)(n.p,{children:"Naming can be done depending on the context and intention. Don't use 'Hungarian Notation\". Try to take the input in integer form itself if possible."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"functions",children:"Functions"}),"\n",(0,t.jsx)(n.h3,{id:"highlights-1",children:"Highlights"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"How to write clean code functions?"}),"\n",(0,t.jsx)(n.li,{children:"Birthday cake! Yummy!"}),"\n",(0,t.jsx)(n.li,{children:"Refactoring - Boy Scout Rule"}),"\n",(0,t.jsx)(n.li,{children:"Q&A"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"summary-1",children:"Summary"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Write functions to achieve single functionality or purpose. Don't write huge\nlines of code in single functions.(Single responsibility principle)"}),"\n",(0,t.jsx)(n.li,{children:"For example lets say we have to validate the user for an application login.\nWe need not write every logic to check if valid user and also write code to\nhandle guest code. Instead we could handle this in two separate functions and\ncall them."}),"\n",(0,t.jsx)(n.li,{children:"Avoid repeating the logics instead reuse them."}),"\n",(0,t.jsx)(n.li,{children:"Easy to follow DevOPS when we write clean code."}),"\n",(0,t.jsx)(n.li,{children:"Break down functions based on right design."}),"\n",(0,t.jsx)(n.li,{children:"Don't have the arguments in outer caller functions only because one of the\ninner function requires it."}),"\n",(0,t.jsx)(n.li,{children:"Draw boundary for the number of function designed."}),"\n",(0,t.jsx)(n.li,{children:"It takes time to write to clean code but it is worthy for healthy programmers\nlife."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"experience-1",children:"Experience"}),"\n",(0,t.jsx)(n.h4,{id:"ordering-the-cake-for-the-baby",children:"Ordering the cake for the baby"}),"\n",(0,t.jsx)(n.p,{children:"We want yummy cakes to make the tummy feel good. But what about the design of\nthe cake. We decided the theme to be universe to show the baby of how the world\ncan be. Cake had independent Layers connecting to each other. Staring with\nbottom layer of aquarium. Middle Layer with upper sea and shore. Finally the sky\nand space."}),"\n",(0,t.jsx)(n.h4,{id:"deal-with-software-projects",children:"Deal with software projects"}),"\n",(0,t.jsx)(n.p,{children:"Ended up in writing a huge function which worked well. But, when read the lines\nof code, realized most of them were duplicate code."}),"\n",(0,t.jsx)(n.p,{children:"Writing automation tests for the tightly coupled functions was really tough."}),"\n",(0,t.jsx)(n.p,{children:"After writing up the code already, I didn't actually hesitate to refactor it.\nRewrote functions with each of its own purpose. It is time consuming but worthy\nin benefits. It improves readability, testing."}),"\n",(0,t.jsx)(n.p,{children:"Incorporated 'DRY' principle to avoid duplications and confusions."}),"\n",(0,t.jsx)(n.h3,{id:"qa-1",children:"Q&A"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Is it too much to take up to write clean code functions?"}),"\n",(0,t.jsx)(n.p,{children:"It is time consuming process sometime. But it improves many things like\ntesting, readability and so. clean code makes a good impression."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Should we set boundary to number of functions?"}),"\n",(0,t.jsx)(n.p,{children:"Yes, draw line based on how much effort it takes and how readable the code is."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"What are all the top three things to consider for refactoring to get clean\ncode."}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Identify if it is not clean code."}),"\n",(0,t.jsx)(n.li,{children:"Don't hesitate to clean code (Boy Scout rule)."}),"\n",(0,t.jsx)(n.li,{children:"Follow single responsibility principle."}),"\n",(0,t.jsx)(n.li,{children:"Follow try catch implementation in places needed."}),"\n",(0,t.jsx)(n.li,{children:"Draw boundaries to split functions. Don't end up in too many."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"take-away-from-session",children:"Take Away from session"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Have meaningful name."}),"\n",(0,t.jsx)(n.li,{children:"Reveal intention through naming."}),"\n",(0,t.jsx)(n.li,{children:"Ok to spend time for naming properly and writing clean code."}),"\n",(0,t.jsx)(n.li,{children:"Have checkpoints and boundaries in splitting functions."}),"\n",(0,t.jsx)(n.li,{children:"Follow single responsibility principle for writing functions."}),"\n"]}),"\n",(0,t.jsx)(n.h1,{id:"clean-code-1",children:"Clean Code"}),"\n",(0,t.jsxs)(n.p,{children:["This is a summary of ",(0,t.jsx)(n.code,{children:"Clean Code"}),", by Robert C. Martin."]}),"\n",(0,t.jsx)(n.p,{children:"This is a compilation of book summaries shared in chapter-wise highlights"}),"\n",(0,t.jsxs)(n.p,{children:["[[",(0,t.jsx)(n.em,{children:"TOC"}),"]]"]}),"\n",(0,t.jsx)(n.h2,{id:"chapter-1---clean-code",children:"Chapter 1 - Clean code"}),"\n",(0,t.jsx)(n.p,{children:"Robert (the author) says here why we are reading this book first as to become\nbetter programmers and how we'll become one at the end after going through the\nbook."}),"\n",(0,t.jsx)(n.p,{children:"We're asked why we hurry up developing something quicker and make up a mess on\nthe code. He gives importance to why the developers should consider clean code\npractices as well as estimating efforts for any module or any code development."}),"\n",(0,t.jsx)(n.p,{children:"Some importance of Clean Code:"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Clean code is not just about technical correctness; it's about readability,\nmaintainability, and adaptability."}),"\n",(0,t.jsx)(n.li,{children:"Clean code is an investment that pays off in the long run. Messy code leads to\nslower. development, more bugs, and higher maintenance costs, ultimately\nhurting businesses."}),"\n",(0,t.jsx)(n.li,{children:"Writing clean code is not just about technical skill; it's also about\nprofessional responsibility."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Instead of boring with long paragraphs let's directly look at a few of the\npeople's words whom the author had interviewed to make us understand the\nimportance of clean code."}),"\n",(0,t.jsxs)(n.table,{children:[(0,t.jsx)(n.thead,{children:(0,t.jsxs)(n.tr,{children:[(0,t.jsx)(n.th,{children:"Programmer"}),(0,t.jsx)(n.th,{children:"Quote"})]})}),(0,t.jsxs)(n.tbody,{children:[(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"Dave Thomas"})," (founder of OTI)"]}),(0,t.jsx)(n.td,{children:"Clean code can be read, and enhanced by a developer other than its original author."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"Bjarne Stroustrup"})," (inventor of c++)"]}),(0,t.jsx)(n.td,{children:"Clean code should be elegant and efficient, doing anything well."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"Grady Booch"})," (author of Object Oriented Analysis and Design with Applications)"]}),(0,t.jsx)(n.td,{children:"Clean code is simple and direct, and never obscures the designer's intent."})]}),(0,t.jsxs)(n.tr,{children:[(0,t.jsxs)(n.td,{children:[(0,t.jsx)(n.code,{children:"Michael Feathers"})," (author of Working Effectively with Legacy Code)"]}),(0,t.jsx)(n.td,{children:"Clean code always looks like it was written by someone who cares."})]})]})]}),"\n",(0,t.jsx)(n.p,{children:'This summary comes to an end with a rule from scout practice "Leave the\ncampground cleaner than you found it" which is quoted by the author as something\nwe can take into our profession as well If we all check our code a little\ncleaner than when we checked it out, the code simply could not rot he says.'}),"\n",(0,t.jsx)(n.p,{children:"Bonus: The image on the cover is M104: The Sombrero Galaxy which is around 30\nmillion light-years from us."}),"\n",(0,t.jsx)(n.h2,{id:"chapter-2---meaningful-names",children:"Chapter 2 - Meaningful Names"}),"\n",(0,t.jsx)(n.p,{children:"Names are important in any software. They are everywhere in the code. So let's\ngo through some ways/rules to find a good name."}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Names should be in such a way that it reveals or tells us the intention of\nwhy it is used, what it does, etc. Example: Name the variable as\n'testPlanUnderWorkOrder' instead of 'tpUnderWO' which is not easily\nunderstandable by all readers."}),"\n",(0,t.jsx)(n.li,{children:"Avoid names that provide wrong information about the name to the reader. ->\nNo abbreviations or wrongly spelled words. -> Refer to words that actually\nmean something. Let's take 'List' as an example. Mention only the collection\nas a list until and unless it is a list else don't use that word which is\nmisleading."}),"\n",(0,t.jsx)(n.li,{children:"Names should be distinguished in such a way that the readers know the\ndifference. -> Avoid misspelled words. -> Number series or noise words are\nmeaningless until and unless they are only needed to satisfy the compiler and\nnot make the words readable."}),"\n",(0,t.jsx)(n.li,{children:"Name it in such a way that it is pronounceable to the reader. Eg: string\nschTPId; -> This doesn't make other readers understand what it actually\nmeans. string scheduleTestPlanId; -> This is pronounceable to the reader as\nit denotes the ID of the schedule test plan."}),"\n",(0,t.jsx)(n.li,{children:"Names should be easily locatable or it should be searchable in the code. ->\nAlways name a constant with a valid name. -> Choose longer names for\nvariables inside the code and avoid using single-letter names. -> Use\nsingle-letter names only within local methods."}),"\n",(0,t.jsx)(n.li,{children:"Try to name a variable that can be easily understood by a new developer\ninstead of encoding it along with a new code."}),"\n",(0,t.jsx)(n.li,{children:"Hungarian Notation - Adding the type of variables for the readers to know. It\nwas used previously when no specific type of variables were introduced. Now\nwith advancements, it makes it harder for readers to read the code."}),"\n",(0,t.jsx)(n.li,{children:"We don't need to prefix the member variable with 'm_' anymore."}),"\n",(0,t.jsx)(n.li,{children:"Class names should have noun or noun phrase name and it should not be a verb."}),"\n",(0,t.jsx)(n.li,{children:"Method should have verb or verb phrase names and it should not be a noun."}),"\n",(0,t.jsx)(n.li,{children:"Always choose clarity over entertainment/cute values."}),"\n",(0,t.jsx)(n.li,{children:"Go with solution domain names rather than problem domain names which makes it\neasy for programmers to read and understand without any assistance."}),"\n",(0,t.jsx)(n.li,{children:"Go with problem domain names when the programmers can get assistance from\nclients easily. Place the similar context names inside a class function or\nnamespace for readers to understand or else add prefixes to the names. E.g.:\nFirst-name, last-name, street, city, state all these signify address which\ncan be grouped under address class. Otherwise, we need to prefix the names\nwith addr to let the reader understand they belong to the address family."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Choosing good names may take time but it saves more than it takes. So let's all\nfollow these rules and try to name our variables in a good and understandable\nway. Let's together become good namers."}),"\n",(0,t.jsx)(n.h2,{id:"chapter-3---functions",children:"Chapter 3 - Functions"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["How small should a function be?","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The indent level of a function should not be greater than one or two."}),"\n",(0,t.jsx)(n.li,{children:"Blocks within if, else, and while statements should be one line long which\nshould probably be a function call. This adds readability as the function\ncalled will have a descriptive name."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Do one thing","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["If you can extract another function from the original function with a name\nthat is quite different from the original function, then the function\nwasn't doing one thing. Functions that do one thing cannot be divided into\nsections.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["In order to make sure functions do one thing, we need to make sure\nstatements within a function are at the same level of abstraction. Mixing\ndifferent levels of abstraction within a function is confusing.\n",(0,t.jsx)(n.a,{href:"https://medium.com/javarevisited/slap-that-ugly-code-6ec276d3a4bc#:~:text=Mixing%20different%20levels%20of%20abstraction,the%20same%20level%20of%20abstraction.",children:"Short and nice example"})]}),"\n",(0,t.jsx)(n.li,{children:"To stay at a single level of abstraction, we should follow the Step-Down\nRule. With this, each function introduces (uses) the next function which\nwill be defined below. Here each function stays at a consistent level of\nabstraction."}),"\n",(0,t.jsxs)(n.li,{children:["Avoid switch and if/else chains. By nature, switch statements do more\nthan one thing. When using switch statements bury them in the basement of\nthe Abstract Factory class -\n",(0,t.jsx)(n.a,{href:"https://levelup.gitconnected.com/avoid-using-switch-statements-like-this-in-your-code-b3dedea66d9",children:"Using switch inside an Abstract Factory"})]}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Use descriptive names","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"It will help clarify the design of the modules in our minds and help us\nimprove it."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Prefer fewer arguments","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Do not pass Boolean (flag) arguments. It means the function does more than\none thing. One when the flag is true and another when the flag is false.\nInstead, it could be two separate functions."}),"\n",(0,t.jsx)(n.li,{children:"Avoid dyadic(2) and triadic(3) function arguments. Do not pass more than\ntriadic(3) arguments."}),"\n",(0,t.jsxs)(n.li,{children:["How to avoid many arguments? (If applicable)","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Create a class with the argument as a member variable of the class and\nthe function as a member function."}),"\n",(0,t.jsx)(n.li,{children:"Reducing the number of arguments by creating objects out of them...Yes,\nwe have done it right! We have refactored our code with the same rule in\none of the PRs."}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Have no side effects","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Should do only what the function is intended to do. If there are necessary\nside effects that need to be done, then the function name must be modified\nto make it clear."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Command and query should be separated (CQS)","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The function should do something or return something. We should avoid\nfunctions that return values and change the state of the system at the same\ntime since this can lead to unexpected behavior and bugs."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Prefer exception to return error codes and Error handling","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["When we return the error code, we create the problem that the caller must\ndeal with the error immediately as below.","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"if (deletePage(page) == E_OK)"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"When using the exception, the error processing code can be separated from\nthe happy path code and can be simplified."}),"\n",(0,t.jsx)(n.li,{children:"It is better to extract the bodies of the try-and-catch blocks into\nfunctions of their own."}),"\n",(0,t.jsx)(n.li,{children:"Error handling is one thing. If try exists in a function, it should be the\nvery first word in the function and there should be nothing after\ncatch/finally blocks."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Do not repeat yourself","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Eliminate duplication to have only one source of truth and one place to\nchange. This will also avoid bugs. Structured Programming: Structured\nprogramming is based on the idea of breaking down a program into smaller,\nsimpler parts, each of which performs a specific task. This makes the\nprogram easier to understand, test, and maintain."}),"\n",(0,t.jsx)(n.li,{children:"By following the clean code for functions, our program will be structured."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"chapter-4---comments",children:"Chapter 4 - Comments"}),"\n",(0,t.jsx)(n.p,{children:"Nothing can be quite so helpful as a well-placed comment. Nothing can be quite\nso damaging as a bad comment that propagates lies and misinformation. Let's look\ninto the categories of good and bad comments that should be considered when you\nthink of adding a comment to a code."}),"\n",(0,t.jsx)(n.p,{children:"Good Comments: A truly good comment is a comment you found a way not to write."}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Legal comments: These involve specifying the required copyright licenses for\nthe projects."}),"\n",(0,t.jsx)(n.li,{children:"Informative comments: Providing basic information with a comment can be\nbeneficial. For instance, explaining the use of complex regular expressions\nor detailing the return value of an abstract class. Note: If possible,\nconsider moving such information to a function or a dedicated class,\neliminating the need for the comment through clear method naming."}),"\n",(0,t.jsx)(n.li,{children:"Explanation of intent: Comments can be used to clarify why certain code is\nwritten, especially if the rationale is not evident in the code itself. If\nthe decision for that specific code is particularly distinct, it should be\ndocumented in a High-Level Design (HLD) document rather than in the code."}),"\n",(0,t.jsx)(n.li,{children:"Clarification: It is helpful to translate the meaning of obscure arguments or\nreturn values into readable comments, especially when they are part of the\nstandard library and cannot be altered. For example, a.comparedTo(b) == -1;\n// a < b a.comparedTo(b) == 0; // a==b"}),"\n",(0,t.jsx)(n.li,{children:"Warning of consequences: Issuing warnings about potential consequences can be\nvaluable. For instance, if a test case is ignored, provide a comment\nexplaining the reason for the omission."}),"\n",(0,t.jsx)(n.li,{children:"TODO comments: If any future changes need to be made, add a TODO comment\nexplaining what should be changed as a follow-up task. Once the follow-up\ntasks are addressed, make sure to remove the comment. However, if something\ncan be addressed immediately, avoid leaving a comment."}),"\n",(0,t.jsx)(n.li,{children:"Amplification: If a specific part of the code needs to be emphasized to\ninform programmers of its importance, especially when the code appears\nsimple, use comments. For example, in the comment feature, we use trim() to\naddress a crucial bug in a shared component."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Bad comments: Inaccurate comments are far worse than no comments at all"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Mumbling: Adding irrelevant information that does not provide any value to\nother programmers because you included it at your discretion."}),"\n",(0,t.jsx)(n.li,{children:"Redundant comment: Explaining a whole function in a way that makes\nprogrammers spend more time reading the comments than the actual code. It is\nalso unnecessary to comment on every property in a class."}),"\n",(0,t.jsx)(n.li,{children:"Misleading comments: Sometimes, comments are imprecise and not accurate. This\nmisinformation can lead other programmers to blindly trust the comment\ninstead of reviewing the code, which may perform different functionality than\nwhat is mentioned in the comment."}),"\n",(0,t.jsx)(n.li,{children:"Mandated comments: In some languages or frameworks, there are mandatory\ncomments that must be added. This might clutter up, propagate lies and lend\nto general confusion and disorganization."}),"\n",(0,t.jsx)(n.li,{children:"Noise comments: These are redundant comments, adding unnecessary or\ndistracting information that doesn't contribute to the code's purpose."}),"\n",(0,t.jsx)(n.li,{children:"Avoid using comments when you can use functions or variables: When explaining\nthe logic, utilize function names or variables, even if it requires creating\nnew ones."}),"\n",(0,t.jsx)(n.li,{children:"Position markers: Refrain from using position markers such as\n/////////////////// Logic starts here /////////////////."}),"\n",(0,t.jsx)(n.li,{children:"Commented-out code: Avoid commenting out sections of code, as this can lead\nto confusion and raise questions about why the code is commented out."}),"\n",(0,t.jsx)(n.li,{children:"Too much information: Avoid providing excessive information in comments,\nincluding detailed discussions and decisions to give complete context.\nInstead, offer a brief rationale and provide a link to documents or\naccessible forums where the details are explained."}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"chapter-5---formatting",children:"Chapter 5 - Formatting"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Readable Code is a Must: The chapter stresses the idea that code is read far\nmore often than it is written. Therefore, the primary goal of formatting is\nto enhance readability."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Code Tells a Story: Martin introduces the notion that well-formatted code\nshould tell a story, conveying the intent of the programmer to anyone who\nreads it."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Vertical Formatting Matters: Vertical formatting involves the arrangement of\nlines of code. Proper vertical spacing and indentation are crucial for\nclarity, and related concepts should be kept close while less related ones\nshould have more space."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:'The Three Laws of Vertical Formatting: Martin introduces three laws: "The\nNewspaper Metaphor," "Related Concepts Should Appear in Proximity," and\n"Variable Declarations Should Be Close to Their Usage." These laws guide the\norganization of code vertically.'}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Horizontal Formatting Guidelines: Keep lines short to avoid horizontal\nscrolling and make code easier to read. Long lines can be challenging to\ncomprehend, and shorter lines improve code understanding."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Team Consistency:",(0,t.jsx)(n.br,{}),"\n","The chapter emphasizes the importance of team rules for consistent formatting\nwithin a development team. Agreed-upon rules contribute to a cohesive codebase\nand facilitate collaboration."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"A Plea for Consistency: Martin makes a passionate plea for consistency in\ncode formatting. He argues that it's better to be consistently bad than\ninconsistently good because inconsistency is more disruptive."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Be Rigorous with Formatting: Adopt a rigorous approach to formatting.\nConsider formatting as important as any other aspect of writing code. A\ndisciplined attitude towards formatting leads to cleaner, more maintainable\ncode."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Uncle Bob's Formatting Rules: Martin shares Uncle Bob's rules, including\nguidelines for the size of functions, the ideal size of a source file, and\nthe importance of vertical and horizontal spacing. These rules are practical\nand aimed at improving code quality."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Formatting as a Reflection of Code Quality: The chapter concludes by\nsuggesting that formatting is a reflection of code quality. Clean and\nconsistent formatting contributes to the overall cleanliness and\nmaintainability of the code. In summary, Chapter 5 not only provides\npractical guidelines for formatting but also emphasizes the storytelling\naspect of code. It encourages developers to view code formatting as an\nintegral part of the software craftsmanship journey."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"chapter-6---objects-and-data-structures",children:"Chapter 6 - Objects and Data Structures"}),"\n",(0,t.jsx)(n.p,{children:"Chapter 6 focuses on principles and practices related to objects, data\nstructures, and encapsulation."}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Data Abstraction","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Objects and data structures should hide their internal workings and expose\nonly necessary operations."}),"\n",(0,t.jsx)(n.li,{children:"Implementation details should be held back and methods should be provided\nto manipulate the encapsulated data."}),"\n",(0,t.jsx)(n.li,{children:"Why is data abstraction required? By isolating the implementation details\nof a data structure, the effort put in to make any updates to the code will\nalso be significantly reduced."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Data/ Object Anti-Symmetry","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The key distinctions between objects and data structures are emphasized,\nalong with how they are used."}),"\n",(0,t.jsx)(n.li,{children:"Objects hide their internal state and expose methods to interact with that\nstate."}),"\n",(0,t.jsx)(n.li,{children:"Data structures often expose their data and allow direct access to their\ndata elements"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Law of Demeter","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Objects should interact with other subjects through a limited number of\nmethods."}),"\n",(0,t.jsxs)(n.li,{children:["The ultimate message here is to avoid chaining. A method can only operate\non objects that are","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Passed as arguments to the methods"}),"\n",(0,t.jsx)(n.li,{children:"Values of fields defined in the class"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Data Transfer Objects","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Data Transfer objects or DTO is a class with public variables and no\nfunctions. They are useful structures when communicating with databases,\nparsing messages from sockets or passing data between different layers of\napplication"}),"\n",(0,t.jsx)(n.li,{children:"Active records are special forms of DTOs that are public structures with\npublic variables primarily used to represent and interact with database\nrecords."}),"\n",(0,t.jsx)(n.li,{children:"Why are they useful? DTOs help to encapsulate data and reduce the number of\nmethod calls needed to retrieve or manipulate data, improving performance\nand reducing network overhead in distributed systems."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"chapter-7---error-handling",children:"Chapter 7 - Error Handling"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Use Exceptions Rather Than Return Codes: Use exceptions to handle errors\ninstead of relying only on return codes. Exceptions provide a cleaner and\nmore expressive way to handle errors, making code easier to read and\nmaintain."}),"\n",(0,t.jsx)(n.li,{children:"Use Try-Catch-Finally Blocks: The book recommends using try-catch-finally\nblocks to handle exceptions gracefully. This structure separates the normal\ncode path from the error-handling logic, improving code readability and\nmaintainability."}),"\n",(0,t.jsx)(n.li,{children:"Provide Context with Exceptions: When throwing exceptions, it's important to\nprovide context to help developers understand what went wrong. This includes\nincluding meaningful error messages and stack traces to aid in debugging.\nWrap External APIs: When working with external APIs that use checked\nexceptions or throw raw exceptions, it's beneficial to wrap these exceptions\nin more meaningful and domain-specific exceptions within your codebase."}),"\n",(0,t.jsx)(n.li,{children:"Define Exception Classes in Terms of Caller's Needs: When designing custom\nexception classes, focus on the needs of the caller rather than the\nimplementation details of the method throwing the exception. This ensures\nthat exceptions are meaningful and useful to the caller."}),"\n",(0,t.jsx)(n.li,{children:"Don't Return Null: Returning null to indicate an error condition can lead to\nNullPointerExceptions and make code harder to reason about. Instead, consider\nusing exceptions or special return values to handle error cases."}),"\n",(0,t.jsx)(n.li,{children:"Don't Pass Null: Similarly, passing null as an argument to methods can lead\nto confusion and errors. It's better to avoid passing null whenever possible."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Examples of Error Handling in Typescript"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Handle errors within services to encapsulate error-handling logic"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"getData() {\n  return httpClient.get<any>('api/data').pipe(\n    catchError((error: HttpErrorResponse) => {\n      console.error('An error occurred:', error.message);\n      return throwError('Something went wrong; please try again later.');\n    })\n  );\n}\n"})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Implement custom error handlers to provide meaningful error messages to users"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:'class CustomErrorHandler {\n  static handleError(error: any): string {\n    let errorMessage = "An unknown error occurred";\n    if (error instanceof HttpErrorResponse) {\n      errorMessage = `Error: ${error.status} - ${error.statusText}`;\n    } else if (error instanceof Error) {\n      errorMessage = error.message;\n    }\n    return errorMessage;\n  }\n}\n'})}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Avoid swallow errors without proper handling or logging"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-typescript",children:"getData() {\n  return httpClient.get<any>('api/data').pipe(\n    catchError(() => { return EMPTY; }) // Swallowing error without handling or logging\n  );\n}\n"})}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"chapter-8---boundaries",children:"Chapter 8 - Boundaries"}),"\n",(0,t.jsx)(n.p,{children:"Sometimes we buy third-party packages or use open source. We must cleanly\nintegrate this foreign code with our own. In this chapter, we look at practices\nand techniques to keep the boundaries of our software clean."}),"\n",(0,t.jsx)(n.h3,{id:"using-third-party-code",children:"Using Third-Party Code"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Third-party providers strive for broad applicability so they can work in many\nenvironments and appeal to a wide audience. Users, on the other hand, want an\ninterface that is focused on their particular needs."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Example: Java Map/ C# Dictionary"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"The Map interface in Java offers utility methods such as Put(key, Value),\nGet(key), Remove(key), and Clear()."}),"\n",(0,t.jsx)(n.li,{children:"When passing a Map around, it may expose the Clear() function, allowing any\nuser to delete its contents, which might not be desirable."}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Best Practice: Wrapping Third-Party APIs"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"It's advisable to wrap third-party APIs and exclusively utilize your\nwrapper."}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-java",children:"public class Sensors\n{\n  private Map<Sensor> sensors = new HashMap();\n\n  public Sensor getById(String id)\n  {\n    return sensors.get(id);\n  }\n}\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Minimize dependencies: In the event of a breaking change, modifications are\nconfined to the wrapper, reducing the impact on the entire codebase."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Future flexibility: You can transition to a different library in the future by\nsimply modifying your wrapper."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"exploring-and-learning-boundaries",children:"Exploring and Learning Boundaries"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Learning the third-party code is hard. Integrating the third-party code is\nhard too."}),"\n",(0,t.jsx)(n.li,{children:"Instead of experimenting and trying out the new stuff in our production code,\nwe could write some automated tests to explore our understanding of the\nthird-party code. These tests are commonly referred to as Learning Tests."}),"\n",(0,t.jsx)(n.li,{children:"Learning tests can also be utilized for assessing new releases of third-party\npackages. By running these tests, we can identify any behavioral differences\nand ensure smooth integration with our existing codebase."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"using-code-that-does-not-yet-exist",children:"Using Code That Does Not Yet Exist"}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"There is another kind of boundary, one that separates the known from the\nunknown. There are often places in the code where our knowledge seems to drop\noff the edge. Sometimes what is on the other side of the boundary is\nunknowable (at least right now)."}),"\n",(0,t.jsx)(n.li,{children:"Write the interface you want and then you can define an Adapter that bridges\nthe gap between the real API (that you don\u2019t have yet) and the API you wish\nyou had."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>o});var t=i(96540);const s={},a=t.createContext(s);function r(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(a.Provider,{value:n},e.children)}}}]);
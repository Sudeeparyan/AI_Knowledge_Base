"use strict";(self.webpackChunksudeeparyan_knowledgebase=self.webpackChunksudeeparyan_knowledgebase||[]).push([[8424],{4522:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>c,metadata:()=>r,toc:()=>o});var s=n(74848),i=n(28453);const c={},a=void 0,r={id:"DevOps/AcceptanceTable",title:"AcceptanceTable",description:"\ud83d\udd0d Overview - Acceptance Table",source:"@site/docs/DevOps/AcceptanceTable.md",sourceDirName:"DevOps",slug:"/DevOps/AcceptanceTable",permalink:"/docs/DevOps/AcceptanceTable",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"devOpsSidebar",previous:{title:"Overview",permalink:"/docs/DevOps/Kubernites/Overview"},next:{title:"AdoptionProcess",permalink:"/docs/DevOps/AdoptionProcess"}},l={},o=[{value:"\ud83d\udd0d Overview - Acceptance Table",id:"-overview---acceptance-table",level:3},{value:"\ud83d\udccb Acceptance Table",id:"-acceptance-table",level:2},{value:"\u2194\ufe0f Test Plan vs Acceptance Table",id:"\ufe0f-test-plan-vs-acceptance-table",level:2},{value:"\ud83e\udd14 Why do we need it?",id:"-why-do-we-need-it",level:2},{value:"\ud83d\udd52 When to Start Writing the Acceptance Table?",id:"-when-to-start-writing-the-acceptance-table",level:2},{value:"\ud83d\udc65 Who is Responsible for the Acceptance Table?",id:"-who-is-responsible-for-the-acceptance-table",level:2},{value:"\ud83d\udee0\ufe0f Practitioners\u200b",id:"\ufe0f-practitioners",level:2},{value:"\ud83d\udcd1 Acceptance Table Structure",id:"-acceptance-table-structure",level:2},{value:"\ud83e\udde9 Acceptance Table Stages",id:"-acceptance-table-stages",level:2},{value:"\ud83d\udea7 Stage 1 - Initiation &amp; Creation of Acceptance Tables",id:"-stage-1---initiation--creation-of-acceptance-tables",level:3},{value:"\ud83d\udd01 Stage 2 - Review &amp; Iteration\u200b",id:"-stage-2---review--iteration",level:3},{value:"\u2705 Stage 3 - Testing &amp; Closure\u200b",id:"-stage-3---testing--closure",level:3}];function d(e){const t={em:"em",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h3,{id:"-overview---acceptance-table",children:"\ud83d\udd0d Overview - Acceptance Table"}),"\n",(0,s.jsx)(t.p,{children:"This document outlines the guidelines for creating and using the Acceptance\nTable."}),"\n",(0,s.jsxs)(t.p,{children:["[[",(0,s.jsx)(t.em,{children:"TOC"}),"]]"]}),"\n",(0,s.jsx)(t.h2,{id:"-acceptance-table",children:"\ud83d\udccb Acceptance Table"}),"\n",(0,s.jsx)(t.p,{children:"As part of software testing, the Acceptance Table (AT) is a comprehensive\nmechanism to document high-level test scenarios derived from acceptance\ncriteria. Typically, an acceptance table is created for each feature, covering\ntest scenarios for both functional and non-functional aspects."}),"\n",(0,s.jsx)(t.h2,{id:"\ufe0f-test-plan-vs-acceptance-table",children:"\u2194\ufe0f Test Plan vs Acceptance Table"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{}),(0,s.jsx)(t.th,{children:(0,s.jsx)(t.strong,{children:"Test Plan"})}),(0,s.jsx)(t.th,{children:(0,s.jsx)(t.strong,{children:"Acceptance Table"})})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"Scope"})}),(0,s.jsx)(t.td,{children:"It includes detailed test cases and procedures."}),(0,s.jsx)(t.td,{children:"It specifies the conditions a feature must meet to be considered acceptable."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"Level of Detail"})}),(0,s.jsx)(t.td,{children:"Its detailed, step-by-step instructions."}),(0,s.jsx)(t.td,{children:"It outlines broader conditions."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"Purpose"})}),(0,s.jsx)(t.td,{children:"How to execute tests to ensure the software functions correctly."}),(0,s.jsx)(t.td,{children:"Sets the standard for when a feature is considered complete and accepted."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:(0,s.jsx)(t.strong,{children:"Audience"})}),(0,s.jsx)(t.td,{children:"Primarily for testing and development teams."}),(0,s.jsx)(t.td,{children:"Project team and also targeted at stakeholders and end-users."})]})]})]}),"\n",(0,s.jsx)(t.h2,{id:"-why-do-we-need-it",children:"\ud83e\udd14 Why do we need it?"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Addressing gaps in current testing:"})," It's an easier platform for anyone to\ncollaborate, provided they have a basic understanding of the application flow."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"High test coverage:"})," With all test scenarios covered against acceptance\ncriteria, the Acceptance Table ensures comprehensive test coverage."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Efficiency in development:"})," Effectively utilizing the Acceptance Table can\nsave development time by early identification of requirement ambiguities,\ncontributing to an overall improved application design."]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"-when-to-start-writing-the-acceptance-table",children:"\ud83d\udd52 When to Start Writing the Acceptance Table?"}),"\n",(0,s.jsx)(t.p,{children:"Start creating the Acceptance table once features are fully defined with\nacceptance criteria. This ensures minimal changes to feature expectations,\nproviding clarity on both in-scope and out-of-scope items. It's recommended to\nhave the first version of the Acceptance Table defined before feature\ndevelopment for a clear testing roadmap and development planning and to identify\npotential issues early."}),"\n",(0,s.jsx)(t.h2,{id:"-who-is-responsible-for-the-acceptance-table",children:"\ud83d\udc65 Who is Responsible for the Acceptance Table?"}),"\n",(0,s.jsx)(t.p,{children:"Each user story owner is accountable for the corresponding test associated with\ntheir user story, while the feature owner holds overall responsibility and\naccountability for the feature, ensuring that all tests are established,\nconducted and passed successfully before shipping the feature."}),"\n",(0,s.jsx)(t.h2,{id:"\ufe0f-practitioners",children:"\ud83d\udee0\ufe0f Practitioners\u200b"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Required:"})," Development Team, Tech Lead, Project Lead."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Optional:"})," Product Owner, Customer."]}),"\n"]}),"\n",(0,s.jsx)(t.h2,{id:"-acceptance-table-structure",children:"\ud83d\udcd1 Acceptance Table Structure"}),"\n",(0,s.jsx)(t.p,{children:"The Acceptance table is organized into the following columns:"}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Acceptance Criteria:"})," Acceptance criteria have predefined conditions or\nstandards that a feature must meet to be considered acceptable. This column\naims to ensure that all line items in the Acceptance Criteria have\ncorresponding tests, facilitating effective tracking back to the\nrequirements."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Story:"})," The user story to which the test cases belong can be added as a\nhyperlink to the respective line."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.strong,{children:"Given, When, Then columns:"})}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.em,{children:"Given:"})," Describes the initial conditions or context of the test scenario."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.em,{children:"When:"})," Specifies the actions or input conditions applied during the test."]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.em,{children:"Then:"})," Outlines the expected outcomes or results for the specific case."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"Example for a simple login page"}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{children:(0,s.jsx)(t.strong,{children:"Given"})}),(0,s.jsx)(t.th,{children:(0,s.jsx)(t.strong,{children:"When"})}),(0,s.jsx)(t.th,{children:(0,s.jsx)(t.strong,{children:"Then"})})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"On Login Page"}),(0,s.jsx)(t.td,{children:"Enter valid login credentials"}),(0,s.jsx)(t.td,{children:"User should be redirected to the authentication page to approve the request from the Authenticator app"})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{children:"On Login Page"}),(0,s.jsx)(t.td,{children:"Enter invalid login credentials"}),(0,s.jsx)(t.td,{children:"Error message should be displayed"})]})]})]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Manual Resolution:"})," Indicates whether the test case has been manually\nverified. If verified, specify the person and the date of verification."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Auto Test:"})," Marks whether there are automated test cases for the scenario,\neither in Unit, Integration, or Acceptance test."]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:'Use "Auto" for automated tests and "NA" for scenarios without automated\ntests.'}),"\n",(0,s.jsx)(t.li,{children:"If no automated tests exist, add 'NA' with a specific reason in the comment\nsection."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Test Name:"})," Specify the automated test case name, typically corresponding\nto the description or block in the Unit, Integration, or Acceptance test\nscript."]}),"\n"]}),"\n",(0,s.jsxs)(t.li,{children:["\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Comments:"}),' Additional information related to the test scenario. For\nexample, in concurrent login testing, you can add notes such as "tested with\n5 users"']}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"If there are additional checks for a specific feature, such as UI mock-up links,\nthey can be added under the 'Other Acceptance Criteria' table."}),"\n",(0,s.jsx)(t.h2,{id:"-acceptance-table-stages",children:"\ud83e\udde9 Acceptance Table Stages"}),"\n",(0,s.jsx)(t.h3,{id:"-stage-1---initiation--creation-of-acceptance-tables",children:"\ud83d\udea7 Stage 1 - Initiation & Creation of Acceptance Tables"}),"\n",(0,s.jsx)(t.p,{children:"Before development, the user story owner defines test scenarios and adds them to\nthe Acceptance Table."}),"\n",(0,s.jsx)(t.h3,{id:"-stage-2---review--iteration",children:"\ud83d\udd01 Stage 2 - Review & Iteration\u200b"}),"\n",(0,s.jsx)(t.p,{children:"During development, the Acceptance Table is shared for review by team members,\nincluding developers and feature owners. All contributors ensure code covers all\ntest scenarios, and any missed scenarios prompt collaborative discussion for\nupdating the Acceptance Table."}),"\n",(0,s.jsx)(t.h3,{id:"-stage-3---testing--closure",children:"\u2705 Stage 3 - Testing & Closure\u200b"}),"\n",(0,s.jsx)(t.p,{children:"This stage happens after development and before the release. Once the feature is\ndeployed and available for testing, team members, irrespective of their roles,\nshould actively participate in testing. It is essential to validate that all\ntest scenarios mentioned in the Acceptance Table are thoroughly covered during\ntesting."}),"\n",(0,s.jsx)(t.p,{children:"Testing updates should be documented in the Acceptance Table during the final\nfeature testing phase."})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>r});var s=n(96540);const i={},c=s.createContext(i);function a(e){const t=s.useContext(c);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(c.Provider,{value:t},e.children)}}}]);
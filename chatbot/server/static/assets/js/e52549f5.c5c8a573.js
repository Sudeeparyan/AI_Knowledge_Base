"use strict";(self.webpackChunksudeeparyan_knowledgebase=self.webpackChunksudeeparyan_knowledgebase||[]).push([[1940],{12212:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var t=r(74848),i=r(28453);const s={},a=void 0,o={id:"RAG360/Retrieval/Unstructured/Searching/Keyword Search/BM25",title:"BM25",description:"BM25 Retriever",source:"@site/docs/RAG360/Retrieval/Unstructured/Searching/Keyword Search/BM25.md",sourceDirName:"RAG360/Retrieval/Unstructured/Searching/Keyword Search",slug:"/RAG360/Retrieval/Unstructured/Searching/Keyword Search/BM25",permalink:"/docs/RAG360/Retrieval/Unstructured/Searching/Keyword Search/BM25",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"ragSidebar",previous:{title:"Overview",permalink:"/docs/RAG360/Retrieval/Unstructured/Searching/Keyword Search/Overview"},next:{title:"Hybrid Searching",permalink:"/docs/category/hybrid-searching"}},l={},c=[{value:"BM25 Retriever",id:"bm25-retriever",level:3},{value:"What is BM25",id:"what-is-bm25",level:4},{value:"Calculation of BM25 Score",id:"calculation-of-bm25-score",level:3},{value:"BM25 Retriever by Llama Index",id:"bm25-retriever-by-llama-index",level:3},{value:"Pros",id:"pros",level:3},{value:"Cons",id:"cons",level:3}];function d(e){const n={code:"code",em:"em",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h3,{id:"bm25-retriever",children:"BM25 Retriever"}),"\n",(0,t.jsx)(n.h4,{id:"what-is-bm25",children:"What is BM25"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.strong,{children:"BM25 (Best Match 25)"})," is a term-based ranking model that aims to provide\r\naccurate and relevant search results by scoring documents based on their term\r\nfrequencies and document lengths."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"BM25 considers both term frequency (TF) and document length normalization to\r\ndetermine the relevance of a document to a given query."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"It follows the probabilistic retrieval framework, which assumes that relevant\r\nand non-relevant documents follow different statistical distributions."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"`$score(D,Q) = {\\sum_{i = 1}^{n} IDF(q_i) . {f(q_i, D).(k_1 + 1)\\over f(q_i, D) +k_1 . (1 - b + b.{|D| \\over avgdl})}}$`;\n"})}),"\n",(0,t.jsx)(n.h3,{id:"calculation-of-bm25-score",children:"Calculation of BM25 Score"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"The BM25 score for document D with respect to query Q is calculated as the\r\nsum of the scores for individual query terms. The formula for calculating the\r\nBM25 score is as follows:"}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"_BM25(D, Q) = \u2211(IDF(q) . ((TF(q, D) . (k1 + 1)) / (TF(q, D) + k1 . (1 \u2014 b + b . (|D| / avgdl)))))_\n"})}),"\n",(0,t.jsxs)(n.ol,{start:"2",children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"In this formula, IDF(q) represents the inverse document frequency of the\r\nquery term q, TF(q, D) denotes the modified term frequency of term q in\r\ndocument D, |D| represents the length of document D, and avgdl is the average\r\ndocument length in the corpus."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Parameters k1 and b are tunable constants that control the impact of term\r\nfrequency saturation and document length normalization, respectively."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"bm25-retriever-by-llama-index",children:"BM25 Retriever by Llama Index"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"BM25 is a Sparse Retrieval technique and basically, it is a keyword search\r\ntechnique."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["This BM25 is well used in search engines like ",(0,t.jsx)(n.code,{children:"Elastic-search"})," and\r\n",(0,t.jsx)(n.code,{children:"Apache Solr"}),"."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Llama Index used this technique and created a retriever. We can import this\r\nBM25 retriever from ",(0,t.jsx)(n.em,{children:"llama_index.retrievers"}),". We need to install a package to\r\nuse this retriever that is ",(0,t.jsx)(n.em,{children:"rank_bm25"})," using either pip or poetry."]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"from llama_index.retrievers import BM25Retriever"})}),"\n",(0,t.jsxs)(n.ol,{start:"4",children:["\n",(0,t.jsx)(n.li,{children:"We can create the retriever by passing the index, docstore, or list of nodes."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.code,{children:"BM25Retriever.from_defaults (index, nodes, docstore, tokenizer, similarity_top_k)"})}),"\n",(0,t.jsxs)(n.p,{children:["here, 1. index, node, docstore: used to pass the embedding in these ways to the\r\nBM25 Retriever 2. ",(0,t.jsx)(n.code,{children:"tokenizer:"})," type of tokenizer that is used for breaking the\r\ninput and output text into more digestible and understandable units for\r\nmachines. 3. ",(0,t.jsx)(n.code,{children:"similarity_top_k:"})," this parameter returns the relevant top_k nodes\r\nfor the query which is then used to summarize the answer."]}),"\n",(0,t.jsx)(n.h3,{id:"pros",children:"Pros"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"BM25 is the ranking algorithm with simplicity and effectiveness in producing\r\nrelevant search results."}),"\n",(0,t.jsx)(n.li,{children:"This BM25 takes both term frequency and document length normalization, which\r\nhelps address the issue of document length bias."}),"\n",(0,t.jsx)(n.li,{children:"This algorithm can handle large document collections efficiently, making it\r\nscalable for real-world search scenarios."}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"cons",children:"Cons"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"BM25 does not consider the semantic meaning or context of the query and the\r\ndocuments, which may result in some bad ranking for certain types of queries."}),"\n",(0,t.jsx)(n.li,{children:"It assumes statistical independence between query terms, which may not hold\r\ntrue in some cases where term dependencies exist."}),"\n",(0,t.jsx)(n.li,{children:"It heavily relies on term frequency and document length, potentially\r\noverlooking other important factors like document structure and relevance\r\nfeedback."}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},28453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>o});var t=r(96540);const i={},s=t.createContext(i);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);
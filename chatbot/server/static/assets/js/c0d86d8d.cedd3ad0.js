"use strict";(self.webpackChunksudeeparyan_knowledgebase=self.webpackChunksudeeparyan_knowledgebase||[]).push([[7356],{99142:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>a});var r=i(74848),o=i(28453);const s={},t=void 0,l={id:"DevOps/GITVersionControl",title:"GITVersionControl",description:"Version Control (VC)",source:"@site/docs/DevOps/GITVersionControl.md",sourceDirName:"DevOps",slug:"/DevOps/GITVersionControl",permalink:"/docs/DevOps/GITVersionControl",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"devOpsSidebar",previous:{title:"DeploymentAutomation",permalink:"/docs/DevOps/DeploymentAutomation"},next:{title:"MeasuringSoftwareEngineeringPractics",permalink:"/docs/DevOps/MeasuringSoftwareEngineeringPractics"}},d={},a=[{value:"Version Control (VC)",id:"version-control-vc",level:3},{value:"Understanding",id:"understanding",level:2},{value:"Overview",id:"overview",level:3},{value:"Why?",id:"why",level:3},{value:"Risk of not doing",id:"risk-of-not-doing",level:3},{value:"Resources",id:"resources",level:3},{value:"Implementation",id:"implementation",level:2},{value:"Non-negotiable items",id:"non-negotiable-items",level:3},{value:"Repo configuration",id:"repo-configuration",level:2},{value:"Assets",id:"assets",level:2},{value:"BuildTools",id:"buildtools",level:2},{value:"Documents",id:"documents",level:2},{value:"Handbooks",id:"handbooks",level:3},{value:"Conventions",id:"conventions",level:4},{value:"HowToGuides",id:"howtoguides",level:4},{value:"Design Documents",id:"design-documents",level:3},{value:"Release Notes",id:"release-notes",level:3},{value:"User Guide",id:"user-guide",level:3},{value:"Build config files",id:"build-config-files",level:3},{value:"Source",id:"source",level:2},{value:"Shared",id:"shared",level:2},{value:"Scripts",id:"scripts",level:2},{value:"Tools",id:"tools",level:2},{value:"Playground",id:"playground",level:2},{value:"Readme",id:"readme",level:2},{value:"Contributing",id:"contributing",level:2}];function c(e){const n={a:"a",blockquote:"blockquote",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h3,{id:"version-control-vc",children:"Version Control (VC)"}),"\n",(0,r.jsx)(n.h2,{id:"understanding",children:"Understanding"}),"\n",(0,r.jsx)(n.h3,{id:"overview",children:"Overview"}),"\n",(0,r.jsx)(n.p,{children:"Version control records all changes made to the files, creating a historical\r\nrecord of all modifications, who made them, when they were made, and why."}),"\n",(0,r.jsx)(n.p,{children:"It facilitates collaboration and enables disaster recovery. It also makes it\r\neasy to audit changes."}),"\n",(0,r.jsxs)(n.p,{children:["Understand in detail\r\n",(0,r.jsx)(n.a,{href:"https://dora.dev/devops-capabilities/technical/version-control/",children:"here"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"why",children:"Why?"}),"\n",(0,r.jsx)(n.p,{children:"Version control is considered to be one of the core engineering software\r\npractices in  because it enables:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Disaster Recovery: Reproduce Deterministically\u200b"}),"\n",(0,r.jsx)(n.li,{children:"Auditability: Show the path backwards for every deployment on where it came\u200b\r\nfrom"}),"\n",(0,r.jsx)(n.li,{children:"Higher Quality: Enables faster delivery and quick feedback to improve the\r\nquality"}),"\n",(0,r.jsx)(n.li,{children:"Capacity Management: Create reproductions\u200b easily when there is a need to\r\nscale up"}),"\n",(0,r.jsx)(n.li,{children:"Response to Defects: Quick restore\u200b"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"risk-of-not-doing",children:"Risk of not doing"}),"\n",(0,r.jsxs)(n.p,{children:["\u26d4"," Failing to follow VC can lead to"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Significant productivity impact - time, cost and resources"}),"\n",(0,r.jsx)(n.li,{children:"Lack of standardization and collaboration"}),"\n",(0,r.jsx)(n.li,{children:"No traceability or auditability for changes made"}),"\n",(0,r.jsx)(n.li,{children:"No possibility to recover from disasters"}),"\n",(0,r.jsx)(n.li,{children:"No version management and application stability"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"resources",children:"Resources"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Topic"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Template"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"RepoFolderStructure.md",children:"Repo folder structure"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"External Links"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"https://dora.dev/devops-capabilities/technical/version-control/",children:"DORA Version Control"})})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"implementation",children:"Implementation"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Below list of project artifacts should be version-controlled (basically\r\neverything needed to restore the production service) -","\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Application source code and dependencies (libraries and static content)"}),"\n",(0,r.jsx)(n.li,{children:"Supporting automated tests"}),"\n",(0,r.jsx)(n.li,{children:"Requirement documents, design documents, release notes, handbooks."}),"\n",(0,r.jsx)(n.li,{children:"Configuration files"}),"\n",(0,r.jsx)(n.li,{children:"Scripts used (database scripts, application reference data)"}),"\n",(0,r.jsx)(n.li,{children:"Environment creation scripts and configurations"}),"\n",(0,r.jsx)(n.li,{children:"Pipeline files"}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["All folders in version control should have a ",(0,r.jsx)(n.code,{children:"code owner"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["It should be access-controlled and audited once a month by the ",(0,r.jsx)(n.code,{children:"Tech Lead"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["Below code/content submission rules should be enforced","\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["All submissions to the ",(0,r.jsx)(n.code,{children:"main"})," branch require PR workflow"]}),"\n",(0,r.jsxs)(n.li,{children:["All submissions to the ",(0,r.jsx)(n.code,{children:"main"})," branch require ",(0,r.jsx)(n.code,{children:"code owner"})," approval"]}),"\n",(0,r.jsxs)(n.li,{children:["All PRs should have passing checks (pipeline, status) before submission\r\nto the ",(0,r.jsx)(n.code,{children:"main"})," branch"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"Internal and external release commits should have tags created for\r\nidentification."}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"non-negotiable-items",children:"Non-negotiable items"}),"\n",(0,r.jsx)(n.p,{children:"To ensure the success of version control process, certain non-negotiable items\r\nshould be adhered:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Main branch should be protected - no merge without review\u200b"}),"\n",(0,r.jsx)(n.li,{children:"Setup code owners for all folders\u200b"}),"\n",(0,r.jsx)(n.li,{children:"Define proper folder structure\u200b"}),"\n",(0,r.jsx)(n.li,{children:"\u200bHave tags created for every release"}),"\n",(0,r.jsx)(n.li,{children:"Have all assets and documents needed to restore production services in\r\nversion control which inturn facilitates review and approval of any updates\r\nmade"}),"\n",(0,r.jsx)(n.li,{children:"Have 'Least privilege' and audit every month"}),"\n"]}),"\n",(0,r.jsx)(n.h1,{id:"frequently-asked-questions-faqs",children:"Frequently Asked Questions (FAQs)"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"All the source code is in version control but some of the documents are in\r\nother places like Sharepoint / Confluence. They are also in different formats\r\nlike Word / Excel / PPT which might not be effective when put into version\r\ncontrol. What should be done in this case?"}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"The main reason for recommending to have all the documents in version control\r\nis to mandate the process of reviewing and approving any change made to the\r\ndocuments. It is agreed that if documents are in different format (not in md\r\nfile) it is difficult to have it in version control and review changes\r\neffectively. In this case, you can continue to maintain the documents in other\r\nplaces but you have to make sure there is a review process enforced for any\r\ndocument update. The documents can have a version history table with reviewed\r\nand approved by details added for every revision. The process for review\r\nshould be documented and aligned with everyone in the team. There should be a\r\ndesignated owner for every document whose review is mandatory for any updates\r\ndone to that particular document. This requires a lot of manual effort to\r\nensure the process is followed stringently."}),"\n",(0,r.jsx)(n.li,{children:"When you are creating new documents in the future, push for transitioning to\r\nmd files and tracking it in version control"}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"The project repo is owned by customer and they take responsibility for adding\r\n/ removing required access to people. What should be my responsibility here as\r\na Tech Lead?"}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"If the repo is owned by customer, we can make sure we are informing the repo\r\nowner whenever a transition happens in the team. As part of onboarding /\r\noff-boarding process document, we should also have a check point for ensuring\r\nthis communication on repo access"}),"\n"]}),"\n",(0,r.jsx)(n.h1,{id:"folder-structure",children:"Folder structure"}),"\n",(0,r.jsx)(n.p,{children:"Below is the recommended folder structure for maintaining all the project\r\nartifacts in version control. It is an exhaustive list and some folders might\r\nnot be applicable for your project. Please use this as a reference and tailor it\r\nbased on your project need."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-markdown",children:".\r\n\u251c\u2500\u2500 .< Repo configuration >\r\n\u251c\u2500\u2500 .assets\r\n\u2502 \u251c\u2500\u2500 BuildTools\r\n| \u2514\u2500\u2500 Documents\r\n|   \u2514\u2500\u2500 Handbooks\r\n|     \u2514\u2500\u2500 Conventions\r\n|       \u2514\u2500\u2500 < asset name > - file that is used in Conventions folder\r\n\u251c\u2500\u2500 BuildTools\r\n\u251c\u2500\u2500 Documents\r\n\u2502 \u251c\u2500\u2500 Handbooks\r\n\u2502 \u2502 \u251c\u2500\u2500 Conventions\r\n\u2502 \u2502 \u2514\u2500\u2500 HowToGuides\r\n\u2502 \u251c\u2500\u2500 Design Documents\r\n\u2502 \u251c\u2500\u2500 Requirement Documents\r\n\u2502 \u251c\u2500\u2500 Release Notes\r\n\u2502 \u251c\u2500\u2500 User Guide\r\n\u2502 \u2514\u2500\u2500 < build config files for documents folder >\r\n\u251c\u2500\u2500 Source\r\n\u2502 \u251c\u2500\u2500 < App/Service 1 >\r\n\u2502 \u2502 \u2514\u2500\u2500 < Sub folders >\r\n\u2502 \u2514\u2500\u2500 < App/Service 2 >\r\n\u2502   \u2514\u2500\u2500 < Sub folders >\r\n\u251c\u2500\u2500 Shared\r\n\u2502 \u2514\u2500\u2500 Libraries\r\n\u2502 \u2514\u2500\u2500 < Shared libraries >\r\n\u251c\u2500\u2500 Scripts\r\n\u251c\u2500\u2500 Tools\r\n\u2502 \u2514\u2500\u2500 < Custom tools built >\r\n\u251c\u2500\u2500 Playground\r\n\u2502 \u251c\u2500\u2500 R&D\r\n\u2502 \u2514\u2500\u2500 Demos\r\n\u251c\u2500\u2500 Readme.md\r\n\u251c\u2500\u2500 Contributing.md\r\n\u2514\u2500\u2500 < build config files for root folder >\n"})}),"\n",(0,r.jsx)(n.h2,{id:"repo-configuration",children:"Repo configuration"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-text",children:".azuredevops - Pull request template\r\n.husky - Pre commit hooks to check for linting errors before every commit\r\n.vscode - VS code extension settings\n"})}),"\n",(0,r.jsx)(n.h2,{id:"assets",children:"Assets"}),"\n",(0,r.jsx)(n.p,{children:"All the images used in different parts of the repo can be organized in this\r\nlocation. For better maintenance the image file can be added by creating the\r\nexact same folder structure similar to where it is being used.The general norm for supporting folders like assets is to\r\nstart with . so that it will be hidden always. This can vary based on your\r\nproject need."}),"\n",(0,r.jsx)(n.h2,{id:"buildtools",children:"BuildTools"}),"\n",(0,r.jsx)(n.p,{children:"This folder contain scripts related to CI/CD"}),"\n",(0,r.jsx)(n.h2,{id:"documents",children:"Documents"}),"\n",(0,r.jsx)(n.p,{children:"This folder contain all the project documentation."}),"\n",(0,r.jsx)(n.h3,{id:"handbooks",children:"Handbooks"}),"\n",(0,r.jsx)(n.p,{children:"By definition, A handbook is a concise and comprehensive collection of\r\ninformation, facts, instructions, and processes about something."}),"\n",(0,r.jsx)(n.h4,{id:"conventions",children:"Conventions"}),"\n",(0,r.jsx)(n.p,{children:"The Conventions folder contains documents and style guides that outlines the\r\nstandards, best practices, guidelines and coding conventions for your project."}),"\n",(0,r.jsx)(n.p,{children:"Any traditional principles and guidelines that are being inherited from external\r\nrecommendations can also be consolidated here."}),"\n",(0,r.jsx)(n.p,{children:"Example : Coding standards, Style guides"}),"\n",(0,r.jsx)(n.h4,{id:"howtoguides",children:"HowToGuides"}),"\n",(0,r.jsx)(n.p,{children:"The How-to Guides folder contains practical step-by-step instructions and\r\ntutorials aimed at helping team members solve specific technical problems or\r\ncomplete common tasks efficiently."}),"\n",(0,r.jsx)(n.p,{children:"Example : How to setup development environment, How to run the application"}),"\n",(0,r.jsx)(n.h3,{id:"design-documents",children:"Design Documents"}),"\n",(0,r.jsx)(n.p,{children:"All the technical design documents goes into this folder. This includes\r\narchitecture documents, feature specific HLDs, etc."}),"\n",(0,r.jsx)(n.h3,{id:"release-notes",children:"Release Notes"}),"\n",(0,r.jsx)(n.p,{children:"Release notes for every update can be maintained in this folder"}),"\n",(0,r.jsx)(n.h3,{id:"user-guide",children:"User Guide"}),"\n",(0,r.jsx)(n.p,{children:"Documentation on how to use the application can go into this folder."}),"\n",(0,r.jsx)(n.h3,{id:"build-config-files",children:"Build config files"}),"\n",(0,r.jsx)(n.p,{children:"Build config files include items like package.json, prettier config files, lint\r\nconfig files and other pipeline files"}),"\n",(0,r.jsx)(n.h2,{id:"source",children:"Source"}),"\n",(0,r.jsx)(n.p,{children:"Here is where the actual code base resides. It could be split into multiple\r\nservices and maintained in different folders based on the architecture"}),"\n",(0,r.jsx)(n.h2,{id:"shared",children:"Shared"}),"\n",(0,r.jsx)(n.p,{children:"All the shared libraries or modules source code can be maintained here."}),"\n",(0,r.jsx)(n.h2,{id:"scripts",children:"Scripts"}),"\n",(0,r.jsx)(n.p,{children:"This folder contains files like build scripts, database migration scripts, etc"}),"\n",(0,r.jsx)(n.h2,{id:"tools",children:"Tools"}),"\n",(0,r.jsx)(n.p,{children:"Any project internal tools can be maintained here"}),"\n",(0,r.jsx)(n.h2,{id:"playground",children:"Playground"}),"\n",(0,r.jsx)(n.p,{children:"Any research or exploration work can be maintained here. This could include\r\nquick prototypes that are done for feasibility check."}),"\n",(0,r.jsx)(n.h2,{id:"readme",children:"Readme"}),"\n",(0,r.jsx)(n.p,{children:"README file is the first item that anyone will look at when visiting your\r\nrepository. Add important information about your project in this file. This can\r\ninclude the following"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"What the project does"}),"\n",(0,r.jsx)(n.li,{children:"How to get started with the project"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"PS: Make sure we are not living with the auto generated README file forever!"}),"\n",(0,r.jsx)(n.h2,{id:"contributing",children:"Contributing"}),"\n",(0,r.jsx)(n.p,{children:"Add quick guide for developers to start contributing to the repo. This typically\r\nincludes prerequisites, how to setup development environment, formatting and\r\nlinting configurations and other instructions on how to develop and merge any\r\nwork to the repo"})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>l});var r=i(96540);const o={},s=r.createContext(o);function t(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);
"use strict";(self.webpackChunksudeeparyan_knowledgebase=self.webpackChunksudeeparyan_knowledgebase||[]).push([[487],{80620:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>a,toc:()=>d});var s=n(74848),t=n(28453);const i={},o=void 0,a={id:"RAG360/Retrieval/Unstructured/Searching/Hybrid Search/Fusion Retriver",title:"Fusion Retriver",description:"1. So this fusion is basically a search methodology that aims to bridge the gap",source:"@site/docs/RAG360/Retrieval/Unstructured/Searching/Hybrid Search/Fusion Retriver.md",sourceDirName:"RAG360/Retrieval/Unstructured/Searching/Hybrid Search",slug:"/RAG360/Retrieval/Unstructured/Searching/Hybrid Search/Fusion Retriver",permalink:"/docs/RAG360/Retrieval/Unstructured/Searching/Hybrid Search/Fusion Retriver",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"ragSidebar",previous:{title:"Qdrant",permalink:"/docs/RAG360/Retrieval/Unstructured/Searching/Hybrid Search/Qdrant"},next:{title:"Meta-Data Filtering",permalink:"/docs/RAG360/Retrieval/Unstructured/Meta-Data Filtering"}},l={},d=[{value:"What the Fusion does",id:"what-the-fusion-does",level:3},{value:"QueryFusionRetriever",id:"queryfusionretriever",level:3},{value:"Simple Fusion",id:"simple-fusion",level:3},{value:"Reciprocal Fusion",id:"reciprocal-fusion",level:3},{value:"Detailed Observation",id:"detailed-observation",level:3}];function c(e){const r={admonition:"admonition",code:"code",h3:"h3",img:"img",li:"li",mdxAdmonitionTitle:"mdxAdmonitionTitle",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"So this fusion is basically a search methodology that aims to bridge the gap\r\nbetween traditional search paradigms and the multifaced dimensions of human\r\nqueries."}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"The fusion concept is to employ multiple query generation and use the\r\nreranking system to re-rank the search results."}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"The main goal is to move closer to unearthing that elusive 90% of\r\ntransformative knowledge that often remains hidden behind top search results."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"what-the-fusion-does",children:"What the Fusion does"}),"\n",(0,s.jsxs)("table",{class:"table-size-for-cloud-services",children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"Process Step"}),(0,s.jsx)("th",{children:"Description"})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("span",{class:"custom-header",children:"Query Generation"})}),(0,s.jsx)("td",{children:"The system starts by generating multiple queries from a user's initial query using OpenAI's GPT Model."})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("span",{class:"custom-header",children:"Vector Search"})}),(0,s.jsx)("td",{children:"Conducts vector-based searches on each of the generated queries to retrieve relevant documents from a predefined set."})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("span",{class:"custom-header",children:"ReRanking System"})}),(0,s.jsx)("td",{children:"Applies the re-ranking algorithm to re-rank the documents based on their relevance across multiple queries."})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("span",{class:"custom-header",children:"Output Generation"})}),(0,s.jsx)("td",{children:"Produces a final output consisting of the re-ranked list of documents."})]})]})]}),"\n",(0,s.jsxs)(r.admonition,{type:"tip",children:[(0,s.jsx)(r.mdxAdmonitionTitle,{}),(0,s.jsx)(r.p,{children:"There are basically 2 types of fusion retrievers powered by Llama Index,\r\naccording to the re-rank algorithms."}),(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"Simple Fusion Retriever"}),"\n",(0,s.jsx)(r.li,{children:"Reciprocal ReRank Fusion Retriever"}),"\n"]})]}),"\n",(0,s.jsx)(r.h3,{id:"queryfusionretriever",children:"QueryFusionRetriever"}),"\n",(0,s.jsx)(r.p,{children:"This QueryFusionRetriever is the retriever released by the Llama Index, which we\r\ncan use to combine more vector searches to retrieve the nodes and do the re-rank\r\nover the retrieved nodes which can be used later by the summary generation."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-js",children:'class QueryFusionRetriever(BaseRetriever):\r\ndef __init__(\r\n        self,\r\n        retrievers: List[BaseRetriever],\r\n        llm: Optional[LLMType] = "default",\r\n        query_gen_prompt: Optional[str] = None,\r\n        mode: FUSION_MODES = FUSION_MODES.SIMPLE,\r\n        similarity_top_k: int = DEFAULT_SIMILARITY_TOP_K,\r\n        num_queries: int = 4,\r\n        use_async: bool = True,\r\n        verbose: bool = False,\r\n    )\n'})}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"retrievers"})," we can have a list of various retrievers that we used to\r\nretrieve the top k nodes using different search techniques."]}),"\n",(0,s.jsxs)(r.li,{children:[(0,s.jsx)(r.strong,{children:"query_gen_prompt"})," This prompt is used to generate multiple queries from\r\nuser's initial query. By default Llama Index have a prompt, if we need to use\r\nour own prompt we can just override it by passing out own prompt."]}),"\n"]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-js",children:'QUERY_GEN_PROMPT = (\r\n    "You are a helpful assistant that generates multiple search queries based on a "\r\n    "single input query. Generate {num_queries} search queries, one on each line, "\r\n    "related to the following input query:\\n"\r\n    "Query: {query}\\n"\r\n    "Queries:\\n"\r\n)\n'})}),"\n",(0,s.jsxs)(r.ol,{start:"3",children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"mode"})," as we saw earlier, this fusion retriever has 2 modes simple and\r\nreciprocal reranking."]}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsx)(r.li,{children:"Simple - simple re-ordering of results based on the original score."}),"\n",(0,s.jsx)(r.li,{children:"Reciprocal - Apply the reciprocal re-rank algorithm."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"similarity_top_k"})," - after the reranking the retriever will retrieve the\r\ntop k nodes which are later used by the summary generator to generate the\r\noutput text."]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"num_queries"})," - indicates how many queries have to be generated from the\r\ninitial user query. To disable this query generation, set this to 1."]}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:[(0,s.jsx)(r.strong,{children:"use_async"})," - If this is true, then only the nodes from the first\r\nretrievers will be passed down to the query fusion retriever. If this is\r\nfalse, then nodes from all the retrievers will be passed down to the query\r\nfusion retriever."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.h3,{id:"simple-fusion",children:"Simple Fusion"}),"\n",(0,s.jsx)(r.p,{children:"The retrieved nodes will be returned as the top-k across all queries and\r\nindexes, as well as handling the de-duplication of any nodes. After that, it\r\nwill simply reorder with the already existing node score and take the top k\r\nnodes from it for the query fusion retriever."}),"\n",(0,s.jsx)(r.h3,{id:"reciprocal-fusion",children:"Reciprocal Fusion"}),"\n",(0,s.jsxs)(r.ol,{children:["\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsx)(r.p,{children:"The retrieved nodes will be returned as the top-k across all queries and\r\nindexes, as well as handling the de-duplication of any nodes."}),"\n"]}),"\n",(0,s.jsxs)(r.li,{children:["\n",(0,s.jsxs)(r.p,{children:["Since all of these retrievers calculate a score, we can use the reciprocal\r\nrerank algorithm to re-sort our nodes without using an additional model or\r\nexcessive computation.\r\n",(0,s.jsx)(r.img,{alt:"FusionRetrieverReciprocal.png",src:n(96148).A+"",width:"701",height:"466"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(r.p,{children:"In Llama Index, the way the reciprocal re-ranking is designed like"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-js",children:'def fuse_results(results_dict, similarity_top_k: int = 2):\r\n    """Fuse results."""\r\n    k = 60.0  # `k` is a parameter used to control the impact of outlier rankings.\r\n    fused_scores = {}\r\n    text_to_node = {}\r\n\r\n    # compute reciprocal rank scores\r\n    for nodes_with_scores in results_dict.values():\r\n        for rank, node_with_score in enumerate(\r\n            sorted(\r\n                nodes_with_scores, key=lambda x: x.score or 0.0, reverse=True\r\n            )\r\n        ):\r\n            text = node_with_score.node.get_content()\r\n            text_to_node[text] = node_with_score\r\n            if text not in fused_scores:\r\n                fused_scores[text] = 0.0\r\n            fused_scores[text] += 1.0 / (rank + k)\r\n\r\n    # sort results\r\n    reranked_results = dict(\r\n        sorted(fused_scores.items(), key=lambda x: x[1], reverse=True)\r\n    )\r\n\r\n    # adjust node scores\r\n    reranked_nodes: List[NodeWithScore] = []\r\n    for text, score in reranked_results.items():\r\n        reranked_nodes.append(text_to_node[text])\r\n        reranked_nodes[-1].score = score\r\n\r\n    return reranked_nodes[:similarity_top_k]\n'})}),"\n",(0,s.jsx)(r.h3,{id:"detailed-observation",children:"Detailed Observation"}),"\n",(0,s.jsx)(r.p,{children:(0,s.jsx)(r.img,{alt:"FusionRetrieverObservation.png",src:n(19948).A+"",width:"1736",height:"204"})})]})}function h(e={}){const{wrapper:r}={...(0,t.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},19948:(e,r,n)=>{n.d(r,{A:()=>s});const s=n.p+"assets/images/FusionRetrieverObservation-9d52a0967b56324f19314214c0c737f1.png"},96148:(e,r,n)=>{n.d(r,{A:()=>s});const s=n.p+"assets/images/FusionRetrieverReciprocal-cc234599fbd1d34f419a427b7a4eedb1.png"},28453:(e,r,n)=>{n.d(r,{R:()=>o,x:()=>a});var s=n(96540);const t={},i=s.createContext(t);function o(e){const r=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function a(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:o(e.components),s.createElement(i.Provider,{value:r},e.children)}}}]);
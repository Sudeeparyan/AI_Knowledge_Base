"use strict";(self.webpackChunksudeeparyan_knowledgebase=self.webpackChunksudeeparyan_knowledgebase||[]).push([[2955],{67096:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>t,metadata:()=>d,toc:()=>c});var s=i(74848),r=i(28453);const t={},l=void 0,d={id:"DevOps/SoftwareEngineeringPractics",title:"SoftwareEngineeringPractics",description:"Software Engineering Practices",source:"@site/docs/DevOps/SoftwareEngineeringPractics.md",sourceDirName:"DevOps",slug:"/DevOps/SoftwareEngineeringPractics",permalink:"/docs/DevOps/SoftwareEngineeringPractics",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"devOpsSidebar",previous:{title:"TestAutomation",permalink:"/docs/DevOps/TestAutomation"}},o={},c=[{value:"Software Engineering Practices",id:"software-engineering-practices",level:3},{value:"Documentation Practices",id:"documentation-practices",level:3},{value:"Requirement Documentation",id:"requirement-documentation",level:4},{value:"Acceptance Table Definition",id:"acceptance-table-definition",level:4},{value:"Technical Documentation",id:"technical-documentation",level:4},{value:"Code Maintenance Practices",id:"code-maintenance-practices",level:3},{value:"Version Control",id:"version-control",level:4},{value:"Trunk-Based Development",id:"trunk-based-development",level:4},{value:"Code Review",id:"code-review",level:4},{value:"Testing and Quality Practices",id:"testing-and-quality-practices",level:3},{value:"Test Automation",id:"test-automation",level:4},{value:"Continuous Integration (CI)",id:"continuous-integration-ci",level:4},{value:"Deployment Automation",id:"deployment-automation",level:4},{value:"Need-driven Software Engineering Practices",id:"need-driven-software-engineering-practices",level:2}];function a(e){const n={a:"a",blockquote:"blockquote",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h3,{id:"software-engineering-practices",children:"Software Engineering Practices"}),"\n",(0,s.jsx)(n.h3,{id:"documentation-practices",children:"Documentation Practices"}),"\n",(0,s.jsx)(n.h4,{id:"requirement-documentation",children:"Requirement Documentation"}),"\n",(0,s.jsx)(n.p,{children:"Requirement documentation records project objectives, scope, functional, and\r\nnon-functional requirements essential for building the software system."}),"\n",(0,s.jsx)(n.p,{children:"It serves as a reference for all stakeholders to ensure alignment and a clear\r\nunderstanding of the requirement."}),"\n",(0,s.jsx)(n.p,{children:"How to implement"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Guideline","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Should be a markdown (.md) file."}),"\n",(0,s.jsx)(n.li,{children:"Should be in the version control of the project."}),"\n",(0,s.jsx)(n.li,{children:"All changes should go through the Pull Request(PR) workflow with the\r\nnecessary reviewers and code owners."}),"\n",(0,s.jsxs)(n.li,{children:["Should include the following contents","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Unambiguously capture functional, and non-functional requirements."}),"\n",(0,s.jsx)(n.li,{children:"Clearly defined outcomes and acceptance criteria."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Maintain two levels of requirement documents","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Project or System-level requirements"}),"\n",(0,s.jsx)(n.li,{children:"Workflow level requirements"}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Template","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"../../../Templates/SystemRequirementsTemplate.md",children:"System Requirements Template"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"../../../Templates/FeatureRequirementsTemplate.md",children:"Feature Requirements Template"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["When","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Should be created during Pre-sales."}),"\n",(0,s.jsx)(n.li,{children:"Should be updated at regular intervals during the project."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Owner","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"Presales Owner"})," should start during the presales"]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"Project Lead"})," should maintain the requirement document."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Contributors","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Project Manager"}),"\n",(0,s.jsx)(n.li,{children:"Tech Lead"}),"\n",(0,s.jsx)(n.li,{children:"Development Team"}),"\n",(0,s.jsx)(n.li,{children:"Customer"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["\u26d4"," ",(0,s.jsx)(n.strong,{children:"Risk of not doing"})]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Unnoticed scope creep"}),"\n",(0,s.jsx)(n.li,{children:"Improper design"}),"\n",(0,s.jsx)(n.li,{children:"Wasted effort - time and money"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"acceptance-table-definition",children:"Acceptance Table Definition"}),"\n",(0,s.jsxs)(n.p,{children:["The acceptance table (AT) records all test scenarios (both functional and\r\nnon-functional) that the application should pass for a feature to be called\r\n",(0,s.jsx)(n.code,{children:"Done"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"It is required to verify and validate that all requirements part of the\r\nacceptance criteria are satisfied."}),"\n",(0,s.jsx)(n.p,{children:"How to implement"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Guideline","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Should be done at a feature level.","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"All features should have an acceptance criteria (AC) mentioned."}),"\n",(0,s.jsx)(n.li,{children:"For each feature, a new acceptance table has to be created."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Should list all test cases in ",(0,s.jsx)(n.code,{children:"given_when_then"})," format."]}),"\n",(0,s.jsx)(n.li,{children:"Should include test cases for all line items listed in acceptance criteria\r\n(AC)."}),"\n",(0,s.jsx)(n.li,{children:"Should include test cases for both functional and non-functional\r\nrequirements."}),"\n",(0,s.jsx)(n.li,{children:"Should indicate if a test case has an automated test and its type (unit,\r\nintegration or E2E)."}),"\n",(0,s.jsx)(n.li,{children:"Should capture who performed the test and when it was tested if the test\r\nwas manually performed."}),"\n",(0,s.jsx)(n.li,{children:"All test cases should directly link to the acceptance criteria ID (in AzDo\r\nwork item or equivalent)."}),"\n",(0,s.jsxs)(n.li,{children:["Should be reviewed and approved by the ",(0,s.jsx)(n.code,{children:"Tech Lead"})," and ",(0,s.jsx)(n.code,{children:"Project Lead"}),"."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["When","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Should be defined during the planning phase for each feature."}),"\n",(0,s.jsx)(n.li,{children:"Should be updated and maintained throughout the development process of the\r\nfeature."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Owner","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"Project Lead"})," should define and maintain the acceptance table."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"Project Lead"})," can delegate ownership to the ",(0,s.jsx)(n.code,{children:"Feature Lead"})," for\r\nparticular features."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Contributors","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Tech Lead"}),"\n",(0,s.jsx)(n.li,{children:"Product Owner"}),"\n",(0,s.jsx)(n.li,{children:"Development Team"}),"\n",(0,s.jsx)(n.li,{children:"Customer"}),"\n",(0,s.jsx)(n.li,{children:"QA Engineers"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["\u26d4"," ",(0,s.jsx)(n.strong,{children:"Risk of not doing"})]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Poor software quality (bugs, requirement misses)"}),"\n",(0,s.jsx)(n.li,{children:"Scope creep after development"}),"\n",(0,s.jsx)(n.li,{children:"Challenges in verifying compliance with AC"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"technical-documentation",children:"Technical Documentation"}),"\n",(0,s.jsx)(n.p,{children:"Technical documentation records clear and comprehensive information about the\r\nsoftware - its architecture, design, and usage."}),"\n",(0,s.jsx)(n.p,{children:"It serves as a valuable resource for development teams, operations, maintenance\r\nor support teams, and other stakeholders."}),"\n",(0,s.jsx)(n.p,{children:"How to implement"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Guideline","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Should be maintained in the version control system."}),"\n",(0,s.jsx)(n.li,{children:"Should be in the same repo (close to the source code)"}),"\n",(0,s.jsx)(n.li,{children:"Should be easily available and searchable for all readers & contributors."}),"\n",(0,s.jsxs)(n.li,{children:["List of technical documents to be maintained","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Architecture documents","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"C4 Architecture diagrams"}),"\n",(0,s.jsx)(n.li,{children:"System overview documents"}),"\n",(0,s.jsx)(n.li,{children:"Database schema documents"}),"\n",(0,s.jsx)(n.li,{children:"API documents"}),"\n",(0,s.jsx)(n.li,{children:"Architecture decision records"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"High-level design documents for each workflow/feature"}),"\n",(0,s.jsxs)(n.li,{children:["Project Handbooks","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Conventions & best practices"}),"\n",(0,s.jsx)(n.li,{children:"How-To Guides"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.li,{children:"Release notes"}),"\n",(0,s.jsx)(n.li,{children:"User-facing documents (as needed)"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Guide to writing good technical documents - ",(0,s.jsx)(n.a,{href:"TBD",children:"Guide"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Template","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"TBD",children:"Document Repository Templates"})}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["When","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Should be used throughout the project lifecycle."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Owner","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"Tech Lead"})," should own and organize technical documentation."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Contributors","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Development Team"}),"\n",(0,s.jsx)(n.li,{children:"Project Lead"}),"\n",(0,s.jsx)(n.li,{children:"Product Owner"}),"\n",(0,s.jsx)(n.li,{children:"Project Manager"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["\u26d4"," ",(0,s.jsx)(n.strong,{children:"Risk of not doing"})]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Lack of common understanding"}),"\n",(0,s.jsx)(n.li,{children:"Increased onboarding time"}),"\n",(0,s.jsx)(n.li,{children:"Knowledge silos and people dependency"}),"\n",(0,s.jsx)(n.li,{children:"Loss of Knowledge over time"}),"\n",(0,s.jsx)(n.li,{children:"Reinvention of wheel and reduced efficiency"}),"\n",(0,s.jsx)(n.li,{children:"Need for repeated meetings and on-call time"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"code-maintenance-practices",children:"Code Maintenance Practices"}),"\n",(0,s.jsx)(n.h4,{id:"version-control",children:"Version Control"}),"\n",(0,s.jsx)(n.p,{children:"Version control records all changes made to the files, creating a historical\r\nrecord of all modifications, who made them, when they were made, and why."}),"\n",(0,s.jsx)(n.p,{children:"It facilitates collaboration and enables disaster recovery. It also makes it\r\neasy to audit changes."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"./VersionControl/Overview.md",children:"Read more on how to adopt Version Control for projects"})}),"\n",(0,s.jsx)(n.h4,{id:"trunk-based-development",children:"Trunk-Based Development"}),"\n",(0,s.jsxs)(n.p,{children:["Trunk-based development is a version control management practice where\r\ndevelopers merge small, frequent updates to a core ",(0,s.jsx)(n.code,{children:"trunk"})," or ",(0,s.jsx)(n.code,{children:"main"})," branch."]}),"\n",(0,s.jsx)(n.p,{children:"It reduces conflicts and streamlines the merging, and integration of code."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"/docs/DevOps/TrunkBasedDevelopment/Overview",children:"Read more on why and how to adopt Trunk Based Development for projects"})}),"\n",(0,s.jsx)(n.h4,{id:"code-review",children:"Code Review"}),"\n",(0,s.jsx)(n.p,{children:"Code review is a practice of having peers and code owners review and provide\r\nfeedback on the proposed code change."}),"\n",(0,s.jsx)(n.p,{children:"It enhances code quality and enables early identification of issues, drifts in\r\nquality or best practices."}),"\n",(0,s.jsx)(n.p,{children:"How to implement"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Guideline","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Code review should be enforced through pull requests (PR)."}),"\n",(0,s.jsxs)(n.li,{children:["All submissions (code, scripts, documents, assets) to the ",(0,s.jsx)(n.code,{children:"main"})," branch\r\nshould be reviewed."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"Code author"})," should create a PR with the proposed change and request\r\nreview comments."]}),"\n",(0,s.jsxs)(n.li,{children:["Review from ",(0,s.jsx)(n.code,{children:"peers"})," is good to have but getting approval from the\r\n",(0,s.jsx)(n.code,{children:"code owners"})," is mandatory."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"Code author"})," should communicate clearly -","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Why this change is required"}),"\n",(0,s.jsx)(n.li,{children:"Changes implemented in the PR"}),"\n",(0,s.jsx)(n.li,{children:"Summary of automated tests added"}),"\n",(0,s.jsx)(n.li,{children:"How the changes were tested"}),"\n",(0,s.jsx)(n.li,{children:"Inline comments and necessary context for async reviewers"}),"\n",(0,s.jsx)(n.li,{children:"If applicable, add screen shot/screen recordings to describe the change"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"Code owner"})," should review and provide feedback on the following -","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Is the submission small and simple for review in 20 minutes?"}),"\n",(0,s.jsx)(n.li,{children:"Is the code easy to understand and follow?"}),"\n",(0,s.jsx)(n.li,{children:"Is the code clean and follows best practices, and software design\r\nprinciples?"}),"\n",(0,s.jsx)(n.li,{children:"Is the code architected well?"}),"\n",(0,s.jsx)(n.li,{children:"Does it follow all coding guidelines agreed upon within the team?"}),"\n",(0,s.jsx)(n.li,{children:"Does the code adhere to the design agreed upon in high-level design\r\ndocuments?"}),"\n",(0,s.jsx)(n.li,{children:"Does the code introduce defects?"}),"\n",(0,s.jsx)(n.li,{children:"Are there areas where code can be improved or simplified?"}),"\n",(0,s.jsx)(n.li,{children:"Is the pipeline passing with no errors or warnings?"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"Code owner"})," (and reviewers) should mark their vote explicitly after\r\nreview (use equivalents of these votes in other code review tools) -","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Approved - The reviewer found no issues (for their area of expertise)"}),"\n",(0,s.jsx)(n.li,{children:"Approved with suggestions - The reviewer has some feedback that needs\r\nto be addressed before submitting"}),"\n",(0,s.jsxs)(n.li,{children:["Wait for Author - ",(0,s.jsx)(n.strong,{children:"Cannot submit"}),", The reviewer needs\r\nclarification/actions from the author"]}),"\n",(0,s.jsxs)(n.li,{children:["Rejected - ",(0,s.jsx)(n.strong,{children:"Cannot submit"}),", Fundamental issues that need\r\nrework/alignment"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"Code owner"})," should communicate clearly -","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Reason for their votes"}),"\n",(0,s.jsx)(n.li,{children:"What needs to be addressed before re-requesting review?"}),"\n",(0,s.jsxs)(n.li,{children:["Differentiate suggestions and comments that are non-negotiable and use\r\nprefixes like ",(0,s.jsx)(n.code,{children:"await"}),", ",(0,s.jsx)(n.code,{children:"major"}),", and ",(0,s.jsx)(n.code,{children:"must-fix:"})," to make blocking\r\ncomments"]}),"\n",(0,s.jsx)(n.li,{children:"Background and reference(s) for comments (wherever applicable)"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"Code author"})," should address all feedback and re-request review if\r\nrequired."]}),"\n",(0,s.jsxs)(n.li,{children:["Once approved, the ",(0,s.jsx)(n.code,{children:"Code author"})," should ensure all feedback is addressed\r\nand changes are merged to the ",(0,s.jsx)(n.code,{children:"main"})," branch."]}),"\n",(0,s.jsxs)(n.li,{children:["For rudimentary changes, ",(0,s.jsx)(n.code,{children:"Code author"})," can bypass reviews from\r\n",(0,s.jsx)(n.code,{children:"Code owners"})," after getting changes reviewed from at least one another\r\n",(0,s.jsx)(n.code,{children:"Code reviewer"})]}),"\n",(0,s.jsxs)(n.li,{children:["Read more-\r\n",(0,s.jsx)(n.a,{href:"https://google.github.io/eng-practices/review/reviewer/",children:"Code Review Handbook"}),",\r\n",(0,s.jsx)(n.a,{href:"https://google.github.io/eng-practices/review/developer/",children:"Code Authors Handbook"})]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["When","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Should be used throughout the development process."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Owner","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"Tech Lead"})," should own and enforce the code review process."]}),"\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"Tech Lead"})," can delegate ownership to ",(0,s.jsx)(n.code,{children:"Code owners"})," when required."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Contributors","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Development Team"}),"\n",(0,s.jsx)(n.li,{children:"QA Engineers"}),"\n",(0,s.jsx)(n.li,{children:"Project Lead"}),"\n",(0,s.jsx)(n.li,{children:"Product Owner"}),"\n",(0,s.jsx)(n.li,{children:"Customer"}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Refer\r\n",(0,s.jsx)(n.a,{href:"../MeasuringSoftwareEngineeringPractices.md#code-review",children:"code review metrics"}),"\r\nto measure the effectiveness of this practice in a project"]}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["\u26d4"," ",(0,s.jsx)(n.strong,{children:"Risk of not doing"})]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Suboptimal quality of code or artifacts submitted"}),"\n",(0,s.jsx)(n.li,{children:"High chance of application design failures"}),"\n",(0,s.jsx)(n.li,{children:"Stability and security issues due to lack of review"}),"\n",(0,s.jsx)(n.li,{children:"Lack of consistency"}),"\n",(0,s.jsx)(n.li,{children:"Lack of knowledge sharing and hindered growth"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"testing-and-quality-practices",children:"Testing and Quality Practices"}),"\n",(0,s.jsx)(n.h4,{id:"test-automation",children:"Test Automation"}),"\n",(0,s.jsx)(n.p,{children:"Test automation involves systematically running automated tests to verify\r\nsoftware functionality and performance of the system, component, module or unit\r\nunder test."}),"\n",(0,s.jsx)(n.p,{children:"It ensures code correctness, and early defect detection, and reduces the risk of\r\nproduction errors. It also improves developer efficiency"}),"\n",(0,s.jsx)(n.p,{children:"How to implement"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["Guideline","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Set up a test automation framework at the start of the project."}),"\n",(0,s.jsx)(n.li,{children:"Write and run tests continuously throughout the delivery process."}),"\n",(0,s.jsxs)(n.li,{children:["Pick a\r\n",(0,s.jsx)(n.a,{href:"https://www.linkedin.com/pulse/pyramid-diamond-honeycomb-trophy-find-testing-strategy-fits/?trk=article-ssr-frontend-pulse_more-articles_related-content-card",children:"testing strategy"}),"\r\nand continuously tune it."]}),"\n",(0,s.jsx)(n.li,{children:"Add automated tests for all code changes (in the same PR)."}),"\n",(0,s.jsx)(n.li,{children:"Ensure all regression tests are passing for all code changes."}),"\n",(0,s.jsxs)(n.li,{children:["Use\r\n",(0,s.jsx)(n.a,{href:"https://www.ibm.com/topics/shift-left-testing",children:"shift left testing approach"})]}),"\n",(0,s.jsx)(n.li,{children:"Complement manual tests along with automated tests (like exploratory\r\ntesting, and usability testing)"}),"\n",(0,s.jsxs)(n.li,{children:["Read more","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"../TestAutomation.md",children:"Test automation document"})}),"\n",(0,s.jsx)(n.li,{children:(0,s.jsx)(n.a,{href:"https://dora.dev/devops-capabilities/technical/test-automation/",children:"DORA Test automation"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["When","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Should be used throughout the development and deployment process."}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Owner","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["The ",(0,s.jsx)(n.code,{children:"Tech Lead"})," should enforce testing automation with the right\r\nstrategies."]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["Contributors","\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Development Team"}),"\n",(0,s.jsx)(n.li,{children:"QA Engineers"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,s.jsxs)(n.blockquote,{children:["\n",(0,s.jsxs)(n.p,{children:["\u26d4"," ",(0,s.jsx)(n.strong,{children:"Risk of not doing"})]}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsx)(n.li,{children:"Lack of stability and failures in production"}),"\n",(0,s.jsx)(n.li,{children:"Severe quality defects due to lack of regression testing"}),"\n",(0,s.jsx)(n.li,{children:"Security vulnerabilities"}),"\n",(0,s.jsx)(n.li,{children:"Performance gaps"}),"\n",(0,s.jsx)(n.li,{children:"Increased post-release maintenance"}),"\n",(0,s.jsx)(n.li,{children:"Stress and burnout for developers"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"continuous-integration-ci",children:"Continuous Integration (CI)"}),"\n",(0,s.jsx)(n.p,{children:"Continuous Integration is the practice of frequently integrating code changes\r\ninto a shared repository and running automated tests. It ensures code\r\nreliability, identifies integration issues early, and improves development\r\ncollaboration."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"./ContinuousIntegration/Overview.md",children:"Read more on why and how to adopt Continuous Integration for projects"})}),"\n",(0,s.jsx)(n.h4,{id:"deployment-automation",children:"Deployment Automation"}),"\n",(0,s.jsx)(n.p,{children:"Deployment automation is what enables the deployment of your software with the\r\npush of a button."}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"./DeploymentAutomation/Overview.md",children:"Read more on why and how to adopt Deployment Automation for projects"})}),"\n",(0,s.jsx)(n.h2,{id:"need-driven-software-engineering-practices",children:"Need-driven Software Engineering Practices"}),"\n",(0,s.jsxs)(n.p,{children:["Below is a list of ",(0,s.jsx)(n.strong,{children:"NEED-DRIVEN"})," software engineering practices that can be\r\nconsidered based on project needs and the team's objectives."]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{children:"S.No"}),(0,s.jsx)(n.th,{children:"Practice"}),(0,s.jsx)(n.th,{children:"Description"}),(0,s.jsx)(n.th,{children:"Who Owns"}),(0,s.jsx)(n.th,{children:"Guideline"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"1"}),(0,s.jsx)(n.td,{children:"Continuous Delivery"}),(0,s.jsx)(n.td,{children:"Ability to release changes of all kinds on demand quickly, safely, and sustainably"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Tech Lead"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://dora.dev/devops-capabilities/technical/continuous-delivery/",children:"Continuous Delivery"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"2"}),(0,s.jsx)(n.td,{children:"Monitoring and Observability"}),(0,s.jsx)(n.td,{children:"Tool or solution that allows to watch, understand and actively debug complex systems"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Tech Lead"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://dora.dev/devops-capabilities/technical/monitoring-and-observability/",children:"Monitoring and observability"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"3"}),(0,s.jsx)(n.td,{children:"Shifting left on Security"}),(0,s.jsx)(n.td,{children:"Address security concerns earliest in the software development lifecycle"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Tech Lead"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://dora.dev/devops-capabilities/technical/shifting-left-on-security/",children:"Shifting left on security"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"4"}),(0,s.jsx)(n.td,{children:"Test data management"}),(0,s.jsx)(n.td,{children:"Strategy to generate, manage and share good test data"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Tech Lead"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://dora.dev/devops-capabilities/technical/test-data-management/",children:"Test data management"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"5"}),(0,s.jsx)(n.td,{children:"Database change management"}),(0,s.jsx)(n.td,{children:"Managing configurations and communication to avoid risk and delay when performing deployments"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Tech Lead"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://dora.dev/devops-capabilities/technical/database-change-management/",children:"Database change management"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{children:"6"}),(0,s.jsx)(n.td,{children:"Flexible Infrastructure"}),(0,s.jsx)(n.td,{children:"Allows for provisioning environments, make configuration changes, and execute deployments through an automated mechanism"}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.code,{children:"Tech Lead"})}),(0,s.jsx)(n.td,{children:(0,s.jsx)(n.a,{href:"https://dora.dev/devops-capabilities/technical/flexible-infrastructure/",children:"Flexible infrastructure"})})]})]})]})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},28453:(e,n,i)=>{i.d(n,{R:()=>l,x:()=>d});var s=i(96540);const r={},t=s.createContext(r);function l(e){const n=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(t.Provider,{value:n},e.children)}}}]);
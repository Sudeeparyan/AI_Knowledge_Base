"use strict";(self.webpackChunksudeeparyan_knowledgebase=self.webpackChunksudeeparyan_knowledgebase||[]).push([[9560],{85619:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var r=s(74848),t=s(28453);const i={},a="Trunk Based Development (TBD)",l={id:"DevOps/TrunkBasedDevelopment/Overview",title:"Trunk Based Development (TBD)",description:"Understanding",source:"@site/docs/DevOps/TrunkBasedDevelopment/Overview.md",sourceDirName:"DevOps/TrunkBasedDevelopment",slug:"/DevOps/TrunkBasedDevelopment/Overview",permalink:"/docs/DevOps/TrunkBasedDevelopment/Overview",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"devOpsSidebar",previous:{title:"TrunkBasedDevelopment",permalink:"/docs/category/trunkbaseddevelopment"},next:{title:"ReleaseProcess",permalink:"/docs/DevOps/TrunkBasedDevelopment/ReleaseProcess"}},o={},d=[{value:"Understanding",id:"understanding",level:2},{value:"Overview",id:"overview",level:3},{value:"Why?",id:"why",level:3},{value:"Key differences between Gitflow workflow and Trunk-based development",id:"key-differences-between-gitflow-workflow-and-trunk-based-development",level:3},{value:"Pre-requisites for effectiveness",id:"pre-requisites-for-effectiveness",level:3},{value:"Risks of not following",id:"risks-of-not-following",level:3},{value:"Resources",id:"resources",level:3},{value:"Moving from Gitflow to TBD",id:"moving-from-gitflow-to-tbd",level:3},{value:"Note",id:"note",level:3},{value:"Implementation",id:"implementation",level:2},{value:"Non-negotiable items",id:"non-negotiable-items",level:3}];function c(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",ol:"ol",p:"p",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,t.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.header,{children:(0,r.jsx)(n.h1,{id:"trunk-based-development-tbd",children:"Trunk Based Development (TBD)"})}),"\n",(0,r.jsx)(n.h2,{id:"understanding",children:"Understanding"}),"\n",(0,r.jsx)(n.h3,{id:"overview",children:"Overview"}),"\n",(0,r.jsxs)(n.p,{children:["Trunk-based development is a version control management strategy where\ndevelopers merge small, frequent updates to a core ",(0,r.jsx)(n.code,{children:"trunk"})," or ",(0,r.jsx)(n.code,{children:"main"})," branch."]}),"\n",(0,r.jsxs)(n.p,{children:["Understand in detail\n",(0,r.jsx)(n.a,{href:"https://dora.dev/devops-capabilities/technical/trunk-based-development/",children:"here"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"why",children:"Why?"}),"\n",(0,r.jsx)(n.p,{children:"Trunk-based development is considered to be one of the core engineering software\npractices"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Faster integration and hence faster feedback on issues"}),"\n",(0,r.jsx)(n.li,{children:"Reduced merge conflicts"}),"\n",(0,r.jsx)(n.li,{children:"Enables release readiness for continuous delivery and continuous deployment"}),"\n",(0,r.jsx)(n.li,{children:"Indirectly encourages better granular planning of tasks to keep PR sizes\nsmall for faster integration"}),"\n",(0,r.jsx)(n.li,{children:"Enhanced team collaboration as Trunk-based development fosters good\nunderstanding between the developers by providing more awareness of all the\ncurrent changes"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"key-differences-between-gitflow-workflow-and-trunk-based-development",children:"Key differences between Gitflow workflow and Trunk-based development"}),"\n",(0,r.jsx)(n.p,{children:"In Gitflow, there is a secondary branch (dev/develop) for on-going development.\nFeature branches are merged into the secondary branch only when the feature is\ncomplete. With several long lived feature branches, conflict resolution becomes\nan overhead. During release, a code freeze is needed on the dev branch from\nwhich a release branch will be taken and merged to master and dev after release\ncompletion."}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Gitflow workflow",src:s(25429).A+"",width:"997",height:"386"})}),"\n",(0,r.jsx)(n.p,{children:"In Trunk-based development, all the work goes directly into the primary branch\nwhich enables faster integration avoiding complex merge conflicts. Features are\nbroken down into smaller units of work that can be completed and merged into the\nprimary branch frequently. TBD is ideal for Continuous integration and\ndeployment. During release, development can still happen in the main trunk while\na release branch can be taken off at the desired commit and release tags can be\nmaintained separately in the release branch"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Trunk-based development workflow",src:s(61417).A+"",width:"994",height:"372"})}),"\n",(0,r.jsx)(n.h3,{id:"pre-requisites-for-effectiveness",children:"Pre-requisites for effectiveness"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Automated tests - to make sure the trunk is always stable. In case automated\ntests are not available, there has to be an additional effort of rigorous\nmanual testing for every PR before it gets merged to trunk"}),"\n",(0,r.jsx)(n.li,{children:"Breakdown stories into smaller tasks - it should only be a few hours of\ndevelopment effort or to the maximum a couple of days of effort"}),"\n",(0,r.jsx)(n.li,{children:"Ensure faster code reviews - limit the number of reviewers to a maximum of 2,\nhave alternate code owners for complex modules"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"risks-of-not-following",children:"Risks of not following"}),"\n",(0,r.jsxs)(n.p,{children:["\u26d4"," Failing to follow TBD can lead to"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Complex merge conflicts"}),"\n",(0,r.jsx)(n.li,{children:"Integration difficulties and quality issues"}),"\n",(0,r.jsx)(n.li,{children:"Release delays"}),"\n",(0,r.jsx)(n.li,{children:"Productivity loss - time and cost impact"}),"\n",(0,r.jsx)(n.li,{children:"CI/CD will not be frequent and effective without Trunk-based development"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"resources",children:"Resources"}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{children:"Topic"}),(0,r.jsx)(n.th,{children:"Description"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Feature flags"}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.a,{href:"https://trunkbaseddevelopment.com/feature-flags/",children:"What are they"}),", ",(0,r.jsx)(n.a,{href:"TBD",children:"How to implement in Python"}),", ",(0,r.jsx)(n.a,{href:"TBD",children:"How to implement in Javascript"}),", ",(0,r.jsx)(n.a,{href:"TBD",children:"How to implement in LabVIEW"})]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"Release process"}),(0,r.jsx)(n.td,{children:(0,r.jsx)(n.a,{href:"/docs/DevOps/TrunkBasedDevelopment/ReleaseProcess",children:"Release Process"})})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{children:"External Links"}),(0,r.jsxs)(n.td,{children:[(0,r.jsx)(n.a,{href:"https://dora.dev/devops-capabilities/technical/trunk-based-development/",children:"DORA documentation on TBD"}),", ",(0,r.jsx)(n.a,{href:"https://trunkbaseddevelopment.com/",children:"Trunk-based development"})]})]})]})]}),"\n",(0,r.jsx)(n.h3,{id:"moving-from-gitflow-to-tbd",children:"Moving from Gitflow to TBD"}),"\n",(0,r.jsx)(n.p,{children:"Here are some steps to get started with when you are moving from Gitflow to TBD"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Delete all the inactive branches"}),"\n",(0,r.jsx)(n.li,{children:"Make sure the main branch is up to date (merge develop to main)"}),"\n",(0,r.jsx)(n.li,{children:"Redirect all the PRs to main instead of develop"}),"\n",(0,r.jsx)(n.li,{children:"Make sure main branch is protected with a pre integration step of rigorous\ntesting (ideally through test automation)"}),"\n",(0,r.jsxs)(n.li,{children:["\u26a0\ufe0f"," Gradually abandon the develop branch. Need not drop the develop\nbranch abruptly"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"note",children:"Note"}),"\n",(0,r.jsx)(n.p,{children:"When starting to adopt TBD, Tech Lead should take care of the following,"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Mindset shift in the team for developing and merging in\n",(0,r.jsx)(n.a,{href:"https://google.github.io/eng-practices/review/developer/small-cls.html",children:"small chunks"})]}),"\n",(0,r.jsx)(n.li,{children:"Deciding whether feature flags are needed and how to implement them"}),"\n",(0,r.jsx)(n.li,{children:"Understanding and deciding on the release process based on your project\nneeds. As all the work goes into one main branch we should decide how release\nbranches will be handled. For example, whether the main branch will always be\nrelease ready (with proper hiding of incomplete features) or release branch\nwill be taken out at the right commit from main"}),"\n",(0,r.jsx)(n.li,{children:"Groom the stories well and split them into smaller tasks"}),"\n",(0,r.jsx)(n.li,{children:"Monitor how well the adoption is happening with the help of these"}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"implementation",children:"Implementation"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["The project repository should have a ",(0,r.jsx)(n.code,{children:"main"})," branch (the trunk)"]}),"\n",(0,r.jsxs)(n.li,{children:["Develop in small batches (a few commits) and merge back to the ",(0,r.jsx)(n.code,{children:"main"})," branch"]}),"\n",(0,r.jsxs)(n.li,{children:["For each batch of work, developers should -","\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Create a new branch from the ",(0,r.jsx)(n.code,{children:"main"})," branch"]}),"\n",(0,r.jsxs)(n.li,{children:["Name the branch using pattern ",(0,r.jsx)(n.code,{children:"users/<firstname-lastname>/<task-name>"}),"\n(eg: ",(0,r.jsx)(n.code,{children:"users/sathish-thangavel/my-task-123"}),")"]}),"\n",(0,r.jsx)(n.li,{children:"Add necessary code changes (a few commits)"}),"\n",(0,r.jsx)(n.li,{children:"Add necessary automated tests"}),"\n",(0,r.jsxs)(n.li,{children:["Merge back to ",(0,r.jsx)(n.code,{children:"main"})," using PR workflow"]}),"\n",(0,r.jsx)(n.li,{children:"Delete the user branch created"}),"\n",(0,r.jsxs)(n.li,{children:["For complex modules where parallel development is needed, create sub\nbranches from the base feature branch and create a PR against the base\nfeature branch to ease the code review process and get the review comments\nquicker. But the merge should always happen to the ",(0,r.jsx)(n.code,{children:"main"})," branch. Once the\nbase feature branch is merged to ",(0,r.jsx)(n.code,{children:"main"}),", the sub branch can be updated\nwith the latest from ",(0,r.jsx)(n.code,{children:"main"})," and PR can be redirected to ",(0,r.jsx)(n.code,{children:"main"})," to get it\nmerged"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.a,{href:"https://martinfowler.com/articles/feature-toggles.html",children:"feature flags"}),"\nto hide any work that is still in progress. But we should make sure automated\ntests are added even for the hidden feature."]}),"\n",(0,r.jsxs)(n.li,{children:["User branch should not be very deviated from ",(0,r.jsx)(n.code,{children:"main"}),". Merge user branches to\n",(0,r.jsx)(n.code,{children:"main"})," at least once a day (Ideal state). If closing the development and\nmerging the user branch in a day is not possible, we should make sure the\nuser branch is in sync with ",(0,r.jsx)(n.code,{children:"main"})," (pull / rebase with main) at least once a\nday."]}),"\n",(0,r.jsxs)(n.li,{children:["Use\n",(0,r.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/azure/devops/repos/git/merging-with-squash?view=azure-devops#squash-merge",children:"Squash Merge"}),"\nwhen merging to the ",(0,r.jsx)(n.code,{children:"main"})," branch."]}),"\n",(0,r.jsx)(n.li,{children:"Have very few active development branches (one active branch per developer)."}),"\n",(0,r.jsxs)(n.li,{children:["Have separate ",(0,r.jsx)(n.code,{children:"release branch"})," for production releases","\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Use ",(0,r.jsx)(n.code,{children:"release branch"})," as the stable branch during release"]}),"\n",(0,r.jsxs)(n.li,{children:["Team should not be blocked to merge changes to ",(0,r.jsx)(n.code,{children:"trunk"})," during release"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"release branch"})," should use ",(0,r.jsx)(n.code,{children:"feature flags"})," to hide any work that is still\nin progress"]}),"\n",(0,r.jsxs)(n.li,{children:["After the ",(0,r.jsx)(n.code,{children:"release branch"})," is taken, if there are any bugfixes integrated\ninto ",(0,r.jsx)(n.code,{children:"main"})," that is needed for release, cherry pick the commits into\n",(0,r.jsx)(n.code,{children:"release branch"})]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"release branch"})," should not be merged back into ",(0,r.jsx)(n.code,{children:"main"}),". If any bugfixes\nare done directly on ",(0,r.jsx)(n.code,{children:"release branch"})," it has to be cherry-picked back into\n",(0,r.jsx)(n.code,{children:"main"})]}),"\n",(0,r.jsxs)(n.li,{children:["Once the release is done, tag the commit in ",(0,r.jsx)(n.code,{children:"release branch"})," with the\nappropriate release tag and delete the ",(0,r.jsx)(n.code,{children:"release branch"})]}),"\n",(0,r.jsxs)(n.li,{children:["Active release branches should have the same CI pipeline as the ",(0,r.jsx)(n.code,{children:"main"}),"\nbranch"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Read more -","\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://dora.dev/devops-capabilities/technical/trunk-based-development/",children:"DORA Trunk-based development"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://dora.dev/devops-capabilities/process/working-in-small-batches/",children:"DORA Working in small batches"})}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"non-negotiable-items",children:"Non-negotiable items"}),"\n",(0,r.jsx)(n.p,{children:"To ensure the success of the Trunk-based development process, certain\nnon-negotiable should be adhered:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Version control setup to check-in repository files"}),"\n",(0,r.jsx)(n.li,{children:"Small chunks of work merged to main on a regular basis (ideally everyday)"}),"\n",(0,r.jsx)(n.li,{children:"Clear process for ensuring stability of main branch (ideally complete test\nautomation)"}),"\n",(0,r.jsx)(n.li,{children:"Proper naming convention for branches"}),"\n",(0,r.jsx)(n.li,{children:"Minimal number of active branches"}),"\n",(0,r.jsx)(n.li,{children:"Well established release procedure"}),"\n",(0,r.jsx)(n.li,{children:"Usage of feature flags if needed"}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},25429:(e,n,s)=>{s.d(n,{A:()=>r});const r=s.p+"assets/images/tbd-gitflow-fde835c1fd3772e914d8b4f80df5f622.PNG"},61417:(e,n,s)=>{s.d(n,{A:()=>r});const r=s.p+"assets/images/tbd-trunk-based-development-f5c7e1b8730af9aa726a20a380b41758.PNG"},28453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>l});var r=s(96540);const t={},i=r.createContext(t);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);
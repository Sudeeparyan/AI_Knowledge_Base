"use strict";(self.webpackChunksudeeparyan_knowledgebase=self.webpackChunksudeeparyan_knowledgebase||[]).push([[8095],{95963:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>o,frontMatter:()=>r,metadata:()=>c,toc:()=>d});var s=t(74848),i=t(28453);const r={},a=void 0,c={id:"RAG360/Data Ingestion/Chunking/Recursive character text spiltter",title:"Recursive character text spiltter",description:"Technique",source:"@site/docs/RAG360/Data Ingestion/Chunking/Recursive character text spiltter.md",sourceDirName:"RAG360/Data Ingestion/Chunking",slug:"/RAG360/Data Ingestion/Chunking/Recursive character text spiltter",permalink:"/docs/RAG360/Data Ingestion/Chunking/Recursive character text spiltter",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"ragSidebar",previous:{title:"Page by Page Chunking",permalink:"/docs/RAG360/Data Ingestion/Chunking/Page by Page Chunking"},next:{title:"Meta Data Attachment",permalink:"/docs/RAG360/Data Ingestion/Chunking/Meta Data Attachment"}},l={},d=[{value:"Technique",id:"technique",level:3},{value:"Advantages",id:"advantages",level:3},{value:"Disadvantages",id:"disadvantages",level:3},{value:"Use Cases",id:"use-cases",level:3}];function h(e){const n={a:"a",code:"code",h3:"h3",li:"li",ol:"ol",p:"p",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.h3,{id:"technique",children:"Technique"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"The Recursive Character Text Splitter is a method used to divide large texts\ninto smaller chunks while preserving the contextual integrity."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"It works by attempting to split the text using a list of characters in a\nspecified order until the chunks are small enough."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["The default list of characters includes ",(0,s.jsx)(n.code,{children:'"\\n\\n"'}),", ",(0,s.jsx)(n.code,{children:'"\\n"'}),", ",(0,s.jsx)(n.code,{children:'" "'}),", and ",(0,s.jsx)(n.code,{children:'""'}),"."]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["This approach helps keep paragraphs, sentences, and words together as much as\npossible, ensuring that the text remains semantically coherent\xb9\xb2.\n",(0,s.jsx)(n.a,{href:"https://dev.to/eteimz/understanding-langchains-recursivecharactertextsplitter-2846",children:"Learn more"})]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.a,{href:"https://python.langchain.com/docs/modules/data_connection/document_transformers/text_splitters/recursive_text_splitter#:~:text=%3D%2020%2C-,length_function,-%3D%20len%2C",children:"length fuction"}),"\ncan be passed to tell how to calculate length of the splitted chunks (default\nin ",(0,s.jsx)(n.code,{children:"len"})," , we can also pass token counting function for the model we are\nusing)"]}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsxs)(n.p,{children:["In case of ",(0,s.jsx)(n.code,{children:"recursiveCharacterTextSplitter"}),", we need to find a good chunk\nsize."]}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h3,{id:"advantages",children:"Advantages"}),"\n",(0,s.jsxs)("table",{class:"table-size-for-cloud-services",children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"Aspect"}),(0,s.jsx)("th",{children:"Description"})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("span",{class:"custom-header",children:"Context Preservation"})}),(0,s.jsx)("td",{children:"By splitting text at logical points (paragraphs, sentences), it maintains the context better than arbitrary splitting."})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("span",{class:"custom-header",children:"Flexibility"})}),(0,s.jsx)("td",{children:"The list of characters can be customized to suit different languages and text structures."})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"disadvantages",children:"Disadvantages"}),"\n",(0,s.jsxs)("table",{class:"table-size-for-cloud-services",children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"Aspect"}),(0,s.jsx)("th",{children:"Description"})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("span",{class:"custom-header",children:"Complexity"})}),(0,s.jsx)("td",{children:"Implementing and tuning the splitter for specific use cases can be complex."})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("span",{class:"custom-header",children:"Language Specificity"})}),(0,s.jsx)("td",{children:"Default settings might not work well for languages without clear word boundaries, requiring additional customization."})]})]})]}),"\n",(0,s.jsx)(n.h3,{id:"use-cases",children:"Use Cases"}),"\n",(0,s.jsxs)("table",{class:"table-size-for-cloud-services",children:[(0,s.jsx)("thead",{children:(0,s.jsxs)("tr",{children:[(0,s.jsx)("th",{children:"Use Case"}),(0,s.jsx)("th",{children:"Description"})]})}),(0,s.jsxs)("tbody",{children:[(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("span",{class:"custom-header",children:"Text Summarization"})}),(0,s.jsx)("td",{children:"Breaking down large documents into manageable chunks for summarization."})]}),(0,s.jsxs)("tr",{children:[(0,s.jsx)("td",{children:(0,s.jsx)("span",{class:"custom-header",children:"Search Indexing"})}),(0,s.jsx)("td",{children:"Splitting documents into smaller parts for more efficient indexing and retrieval."})]})]})]})]})}function o(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},28453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>c});var s=t(96540);const i={},r=s.createContext(i);function a(e){const n=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:n},e.children)}}}]);
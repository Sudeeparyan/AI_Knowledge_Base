"use strict";(self.webpackChunksudeeparyan_knowledgebase=self.webpackChunksudeeparyan_knowledgebase||[]).push([[3172],{21511:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>i,default:()=>l,frontMatter:()=>a,metadata:()=>o,toc:()=>m});var s=t(74848),r=t(28453);const a={},i=void 0,o={id:"AI360/Agents/LangGraph/Agent with memory",title:"Agent with memory",description:"1. The issue in the code arises from the lack of retaining memory between interactions.",source:"@site/docs/AI360/Agents/LangGraph/Agent with memory.md",sourceDirName:"AI360/Agents/LangGraph",slug:"/AI360/Agents/LangGraph/Agent with memory",permalink:"/docs/AI360/Agents/LangGraph/Agent with memory",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"AI360Sidebar",previous:{title:"Agent",permalink:"/docs/AI360/Agents/LangGraph/Agent"},next:{title:"AI Frameworks",permalink:"/docs/category/ai-frameworks"}},c={},m=[];function h(e){const n={a:"a",admonition:"admonition",code:"code",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'messages = [HumanMessage(content="Add 3 and 4.")]\r\nmessages = react_graph.invoke({"messages": messages})\r\nfor m in messages[\'messages\']:\r\n    m.pretty_print()\n'})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'messages = [HumanMessage(content="Multiply that by 2.")]\r\nmessages = react_graph.invoke({"messages": messages})\r\nfor m in messages[\'messages\']:\r\n  m.pretty_print()\n'})}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"The issue in the code arises from the lack of retaining memory between interactions."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:'Without memory retention, the agent treats each input as a standalone prompt, so when we ask it for "multiply that by 2," the agent doesn\u2019t have access to the result of the previous addition (3 + 4 = 7) unless explicitly provided again.\r\nThis results in the failure to continue the logical sequence of tasks.'}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:" from langgraph.checkpoint.memory import MemorySaver\r\n memory = MemorySaver()\r\n\r\n\r\n react_graph_memory = builder.compile(checkpointer=memory)\n"})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# Specify a thread\r\nconfig = {"configurable": {"thread_id": "1"}}\r\n\r\n# Specify an input\r\nmessages = [HumanMessage(content="Add 3 and 4.")]\r\n\r\n# Run\r\nmessages = react_graph_memory.invoke({"messages": messages},config)\r\nfor m in messages[\'messages\']:\r\n    m.pretty_print()\n'})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.img,{alt:"memory",src:t(75683).A+"",width:"1375",height:"388"})}),"\n",(0,s.jsxs)(n.ol,{start:"3",children:["\n",(0,s.jsx)(n.li,{children:'The "thread_id" is used to identify and group related interactions.\r\nIt acts as a key or identifier for storing and retrieving memory (graph states) associated with a particular session or conversation thread.'}),"\n",(0,s.jsx)(n.li,{children:"Multiple sessions or conversations can be tracked independently by assigning unique thread_ids."}),"\n",(0,s.jsx)(n.li,{children:"At every step in the conversation or task execution, the state of the graph (the computation or decision flow) is checkpointed (saved)."}),"\n",(0,s.jsx)(n.li,{children:"All the checkpoints for a specific thread of interaction are saved in memory associated with the thread_id."}),"\n",(0,s.jsx)(n.li,{children:"This means that every interaction in the same thread has access to the memory of previous states, allowing continuity in conversation."}),"\n"]}),"\n",(0,s.jsx)(n.admonition,{type:"tip",children:(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["For more understanding regarding memory, check out this:  ",(0,s.jsx)(n.a,{href:"https://langchain-ai.github.io/langgraph/concepts/memory/",children:"Memory - Long term memory, Short term memory"})]}),"\n"]})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'messages = [HumanMessage(content="Multiply that by 2.")]\r\nmessages = react_graph_memory.invoke({"messages": messages}, config)\r\nfor m in messages[\'messages\']:\r\n    m.pretty_print()\n'})}),"\n",(0,s.jsxs)(n.ol,{start:"8",children:["\n",(0,s.jsx)(n.li,{children:'By adding MemorySaver, we can enable the agent to remember the result of the previous operation (7 in this case) and\r\nuse it in the next step. The agent can then correctly interpret "Multiply that by 2" as multiplying 7 by 2, giving the right answer.'}),"\n"]})]})}function l(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},75683:(e,n,t)=>{t.d(n,{A:()=>s});const s=t.p+"assets/images/memory-c8bc5c4a02f422186f85f03a8d45a2b2.png"},28453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>o});var s=t(96540);const r={},a=s.createContext(r);function i(e){const n=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(a.Provider,{value:n},e.children)}}}]);
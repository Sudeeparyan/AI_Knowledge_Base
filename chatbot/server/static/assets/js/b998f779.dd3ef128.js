"use strict";(self.webpackChunksudeeparyan_knowledgebase=self.webpackChunksudeeparyan_knowledgebase||[]).push([[3510],{24336:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>i,contentTitle:()=>a,default:()=>p,frontMatter:()=>l,metadata:()=>s,toc:()=>d});var o=n(74848),r=n(28453);const l={},a=void 0,s={id:"AI360/Agents/LangGraph/Router",title:"Router",description:"Router is where the chat model routes between a direct response or a tool call based on the user query.",source:"@site/docs/AI360/Agents/LangGraph/Router.md",sourceDirName:"AI360/Agents/LangGraph",slug:"/AI360/Agents/LangGraph/Router",permalink:"/docs/AI360/Agents/LangGraph/Router",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"AI360Sidebar",previous:{title:"Chain",permalink:"/docs/AI360/Agents/LangGraph/Chain"},next:{title:"Agent",permalink:"/docs/AI360/Agents/LangGraph/Agent"}},i={},d=[];function c(e){const t={code:"code",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:"Router is where the chat model routes between a direct response or a tool call based on the user query."}),"\n",(0,o.jsx)(t.p,{children:(0,o.jsx)(t.img,{alt:"router",src:n(81717).A+"",width:"154",height:"289"})}),"\n",(0,o.jsxs)(t.ol,{children:["\n",(0,o.jsx)(t.li,{children:'The doted lines from the "tool_calling_llm" is Conditional edge. this will look at the chat model model output, and route to our tool calling node or simply end if no tool call is performed.'}),"\n"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'   from langchain_openai import ChatOpenAI\r\n\r\n   def multiply(a: int, b: int) -> int:\r\n       """Multiply a and b.\r\n\r\n       Args:\r\n           a: first int\r\n           b: second int\r\n       """\r\n       return a * b\r\n\r\n   llm = ChatOpenAI(model="gpt-4o")\r\n   llm_with_tools = llm.bind_tools([multiply])\n'})}),"\n",(0,o.jsxs)(t.ol,{start:"2",children:["\n",(0,o.jsx)(t.li,{children:"Build the StateGraph for the above diagram."}),"\n"]}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-python",children:'   from langgraph.graph import StateGraph, START, END\r\n   from langgraph.graph import MessagesState\r\n   from langgraph.prebuilt import ToolNode\r\n   from langgraph.prebuilt import tools_condition\r\n\r\n   # Node\r\n   def tool_calling_llm(state: MessagesState):\r\n       return {"messages": [llm_with_tools.invoke(state["messages"])]}\r\n\r\n   # Build graph\r\n   builder = StateGraph(MessagesState)\r\n   builder.add_node("tool_calling_llm", tool_calling_llm)\r\n   builder.add_node("tools", ToolNode([multiply]))\r\n   builder.add_edge(START, "tool_calling_llm")\r\n   builder.add_conditional_edges(\r\n       "tool_calling_llm",\r\n       # If the latest message (result) from assistant is a tool call -> tools_condition routes to tools\r\n       # If the latest message (result) from assistant is a not a tool call -> tools_condition routes to END\r\n       tools_condition,\r\n   )\r\n   builder.add_edge("tools", END)\r\n   graph = builder.compile()\n'})})]})}function p(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},81717:(e,t,n)=>{n.d(t,{A:()=>o});const o=n.p+"assets/images/router-7c164a7ce683a9f82d9a0b14ad9b5244.png"},28453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>s});var o=n(96540);const r={},l=o.createContext(r);function a(e){const t=o.useContext(l);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),o.createElement(l.Provider,{value:t},e.children)}}}]);
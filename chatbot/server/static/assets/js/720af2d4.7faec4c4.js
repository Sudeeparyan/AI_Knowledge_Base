"use strict";(self.webpackChunksudeeparyan_knowledgebase=self.webpackChunksudeeparyan_knowledgebase||[]).push([[5921],{53150:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>c,frontMatter:()=>t,metadata:()=>a,toc:()=>d});var r=s(74848),l=s(28453);const t={},i=void 0,a={id:"DevOps/TrunkBasedDevelopment/ReleaseProcess",title:"ReleaseProcess",description:"Trunk-based development",source:"@site/docs/DevOps/TrunkBasedDevelopment/ReleaseProcess.md",sourceDirName:"DevOps/TrunkBasedDevelopment",slug:"/DevOps/TrunkBasedDevelopment/ReleaseProcess",permalink:"/docs/DevOps/TrunkBasedDevelopment/ReleaseProcess",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"devOpsSidebar",previous:{title:"Trunk Based Development (TBD)",permalink:"/docs/DevOps/TrunkBasedDevelopment/Overview"},next:{title:"Kubernites",permalink:"/docs/category/kubernites"}},o={},d=[{value:"Trunk-based development",id:"trunk-based-development",level:2},{value:"Recommended Release Process for teams with low release cadence",id:"recommended-release-process-for-teams-with-low-release-cadence",level:2},{value:"Roles involved",id:"roles-involved",level:3},{value:"Release process",id:"release-process",level:3},{value:"Taking release branch",id:"taking-release-branch",level:4},{value:"Release testing",id:"release-testing",level:4},{value:"Handling bug fixes",id:"handling-bug-fixes",level:4},{value:"Completing the release",id:"completing-the-release",level:4},{value:"Deleting the release branch",id:"deleting-the-release-branch",level:4},{value:"<strong>When not to delete release branch</strong>",id:"when-not-to-delete-release-branch",level:5},{value:"Recommended Release Process for teams with high release cadence",id:"recommended-release-process-for-teams-with-high-release-cadence",level:2}];function h(e){const n={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h2,{id:"trunk-based-development",children:"Trunk-based development"}),"\n",(0,r.jsx)(n.p,{children:"Release process for Trunk-based development can be decided based on the release\ncadence of each team."}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["If the team does very frequent release (like one release per day), they can\ngo with\n'",(0,r.jsx)(n.a,{href:"https://trunkbaseddevelopment.com/release-from-trunk/",children:"Release from trunk"}),"'\nstrategy."]}),"\n",(0,r.jsxs)(n.li,{children:["The teams with low release cadence (cycle/iteration releases - one release\nper sprint or month) can follow\n'",(0,r.jsx)(n.a,{href:"https://trunkbaseddevelopment.com/branch-for-release/",children:"Branch for release"}),"'\nstrategy."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"This document provides more details on the release process based on frequency of\nrelease."}),"\n",(0,r.jsxs)(n.p,{children:["[[",(0,r.jsx)(n.em,{children:"TOC"}),"]]"]}),"\n",(0,r.jsx)(n.h2,{id:"recommended-release-process-for-teams-with-low-release-cadence",children:"Recommended Release Process for teams with low release cadence"}),"\n",(0,r.jsx)(n.p,{children:"For teams with low release cadence, they can go with 'Branch for release'\nstrategy. This is the default recommendation for teams. It also helps in\nhandling intermediate bug fix releases seamlessly."}),"\n",(0,r.jsx)(n.h3,{id:"roles-involved",children:"Roles involved"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Release owner"})," - A designated person from the development team can act as\nrelease owner for a particular release. This role can be assigned to\ndevelopers on a rotational basis"]}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Tech Lead"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"Developers"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.strong,{children:"QA"})}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"release-process",children:"Release process"}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{alt:"Release from branch",src:s(54821).A+"",width:"698",height:"398"})}),"\n",(0,r.jsx)(n.h4,{id:"taking-release-branch",children:"Taking release branch"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Once all the features required for the release are available in trunk,\nrelease owner takes a ",(0,r.jsx)(n.code,{children:"release branch"})," from the ",(0,r.jsx)(n.code,{children:"trunk"})]}),"\n",(0,r.jsxs)(n.li,{children:["If version updates are done manually, the right version for the upcoming\nrelease has to be updated in ",(0,r.jsx)(n.code,{children:"trunk"})," before taking the ",(0,r.jsx)(n.code,{children:"release branch"}),"."]}),"\n",(0,r.jsxs)(n.li,{children:["The ",(0,r.jsx)(n.code,{children:"release branch"})," can be named as ",(0,r.jsx)(n.code,{children:"release/<version-number>"})," (Example:\n",(0,r.jsx)(n.code,{children:"release/1.0.0"}),")","\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["We can also have 'x' in place of bugfix version in the release branch\nname, so that it is more evident that all the bug fixes for a particular\nrelease are handled in this release branch (Example: ",(0,r.jsx)(n.code,{children:"release/1.0.x"}),")"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["The feature development can continue in ",(0,r.jsx)(n.code,{children:"trunk"})," but ",(0,r.jsx)(n.code,{children:"release branch"})," should\nnot receive any new updates."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"Release branch"})," acts as the stable place for testing and other release\nactivities."]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"release-testing",children:"Release testing"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["After the ",(0,r.jsx)(n.code,{children:"release branch"})," is taken, the release owner deploys it to the\nstaging environment (if applicable) and initiates the release testing process\nby informing the QA team.","\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"If dedicated QA team is not available, the equivalent role has to be played\nby the developers during release time"}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.li,{children:"The duration of release testing depends on the nature of the project and\nwhether or not test automation is in place. If there is no test automation, a\nsignificantly higher amount of time has to be put in for the release testing.\nIt should ensure rigorous testing of all the features in the application and\nnot just focus on the newly added features."}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"handling-bug-fixes",children:"Handling bug fixes"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"When a bug is identified during release testing, it should be assigned to a\ndeveloper. They will be considered as the bug fix owner."}),"\n",(0,r.jsxs)(n.li,{children:["The bug fix owner should do the following","\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Reproduce the bug in ",(0,r.jsx)(n.code,{children:"trunk"})]}),"\n",(0,r.jsxs)(n.li,{children:["Take a ",(0,r.jsx)(n.code,{children:"user branch"})," from ",(0,r.jsx)(n.code,{children:"trunk"})]}),"\n",(0,r.jsxs)(n.li,{children:["Fix the bug in the ",(0,r.jsx)(n.code,{children:"user branch"})]}),"\n",(0,r.jsx)(n.li,{children:"Test the changes in dev environment"}),"\n",(0,r.jsx)(n.li,{children:"If applicable, update the test cases to make sure the bug will be captured\nin automation going forward"}),"\n",(0,r.jsxs)(n.li,{children:["Raise a PR from ",(0,r.jsx)(n.code,{children:"user branch"})," to ",(0,r.jsx)(n.code,{children:"trunk"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["The PR has to be reviewed by Tech Lead / Code owner and merged to ",(0,r.jsx)(n.code,{children:"trunk"})]}),"\n",(0,r.jsxs)(n.li,{children:["Once the bug fix is merged to ",(0,r.jsx)(n.code,{children:"trunk"}),", bug fix owner should do the following,","\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Create a ",(0,r.jsx)(n.code,{children:"user branch"})," from ",(0,r.jsx)(n.code,{children:"release branch"})]}),"\n",(0,r.jsxs)(n.li,{children:["Cherry pick the bug fix commit from ",(0,r.jsx)(n.code,{children:"trunk"})," in to the ",(0,r.jsx)(n.code,{children:"user branch"})]}),"\n",(0,r.jsxs)(n.li,{children:["Raise a PR from ",(0,r.jsx)(n.code,{children:"user branch"})," to ",(0,r.jsx)(n.code,{children:"release branch"})]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["Release owner is responsible for reviewing and merging the cherry-picked bug\nfix PR to ",(0,r.jsx)(n.code,{children:"release branch"})," and redeploying it to staging to continue with\nrelease testing"]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Note"}),": In very rare cases where the bug is not reproducible in ",(0,r.jsx)(n.code,{children:"trunk"})," but\nhappening only in ",(0,r.jsx)(n.code,{children:"release branch"}),", the ",(0,r.jsx)(n.code,{children:"user branch"})," can be taken from\n",(0,r.jsx)(n.code,{children:"release branch"})," instead of ",(0,r.jsx)(n.code,{children:"trunk"}),". Fix and merge to ",(0,r.jsx)(n.code,{children:"release branch"}),",\ncherry-pick the bug fix commit from ",(0,r.jsx)(n.code,{children:"release branch"})," to ",(0,r.jsx)(n.code,{children:"trunk"})," as needed to\nmake sure the fix is applied in both the places (",(0,r.jsx)(n.code,{children:"release branch"})," and\n",(0,r.jsx)(n.code,{children:"trunk"}),")"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"completing-the-release",children:"Completing the release"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["When the release testing is complete and QA team has given a 'GO',","\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Tag the top commit in release branch with the appropriate release label.\nThe tag format can be ",(0,r.jsx)(n.code,{children:"v<version number>"})," . (Example: ",(0,r.jsx)(n.code,{children:"v1.0.0"}),")"]}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["After the release, the ",(0,r.jsx)(n.code,{children:"release branch"})," can stay alive for some time until\nthe released version is stable, typically for about a month."]}),"\n",(0,r.jsxs)(n.li,{children:["If there are any production issues in the released version that needs a patch\n/ bug fix release, make use of the same ",(0,r.jsx)(n.code,{children:"release branch"})," to fix the issues\nand make the patch release.","\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["The bug fix has to go through the same process as mentioned in the\n",(0,r.jsx)(n.a,{href:"#handling-bug-fixes",children:"above section."})]}),"\n",(0,r.jsx)(n.li,{children:"Make sure to add tags for all such interim releases."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"deleting-the-release-branch",children:"Deleting the release branch"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Once the release is well stabilized, the release branch can be deleted."}),"\n",(0,r.jsx)(n.li,{children:"Note that release branch need not be merged to trunk."}),"\n",(0,r.jsx)(n.li,{children:"The released commit can be tracked anytime using the tags that are created,\nhence the release branch is safe to be deleted if you have the right tags in\nplace."}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," The above suggestion is based on Git version control system. If you\nare using a different VCS, it is important to understand how tagging works\nthere before deciding to delete release branch"]}),"\n"]}),"\n",(0,r.jsx)(n.h5,{id:"when-not-to-delete-release-branch",children:(0,r.jsx)(n.strong,{children:"When not to delete release branch"})}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["Never delete the release branch ",(0,r.jsx)(n.strong,{children:"without creating proper tags"})," to refer to\nthe released commits. Once the release branch is deleted, if the commits are\nnot tagged, it will be garbage collected by git as dangling commits"]}),"\n",(0,r.jsxs)(n.li,{children:["Never delete the release branch if the version control system you are using\n",(0,r.jsx)(n.strong,{children:"doesn't allow creating tags"})]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"recommended-release-process-for-teams-with-high-release-cadence",children:"Recommended Release Process for teams with high release cadence"}),"\n",(0,r.jsx)(n.p,{children:"For teams with high release cadence, the recommendation is to go with 'Release\nfrom trunk' strategy."}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Ideally for high release cadence teams, there should be complete test\nautomation and CI/CD in place to deliver directly from Trunk"}),"\n",(0,r.jsx)(n.li,{children:"The released commit in trunk has to be tagged to track the release later"}),"\n",(0,r.jsx)(n.li,{children:"Feature flags should be in place to hide any work in progress"}),"\n",(0,r.jsx)(n.li,{children:"Any production issues will be dealt in fix forward approach where the updates\nwill be made in trunk and released again."}),"\n"]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.strong,{children:"Note:"})," 'Release from trunk' strategy is less likely to be followed . Hence the process is not explained in detail in this document."]}),"\n",(0,r.jsx)(n.h1,{id:"frequently-asked-questions-faqs",children:"Frequently Asked Questions (FAQs)"}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"When Task B is dependent on Task A which is not yet merged and in PR still,\nwhere to take the branch for Task B and how to merge it back?"}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Take the branch for Task B from Task A. If Task B is completed, raise a PR to\nTask A(if it is still not merged to trunk). This helps in reviewing only the\nspecific changes"}),"\n",(0,r.jsx)(n.li,{children:"If Task B PR is approved. Wait for Task A to be merged to trunk. Then redirect\nTask B PR to trunk and merge it to trunk"}),"\n",(0,r.jsx)(n.li,{children:"Note: Any merge should happen only to trunk"}),"\n"]}),"\n",(0,r.jsxs)(n.blockquote,{children:["\n",(0,r.jsx)(n.p,{children:"In our project, we follow milestone based releases and the frequency is not\nhigh. In this case, I do not see a need for hiding incomplete features using\nfeature flags. Is this okay?"}),"\n"]}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Ideally when we follow trunk based development, we should aim to have the\ntrunk in releasable state always. If the project nature doesn't demand for\nfrequent releases, you can make the decision to skip feature flags. But we\nshould have clarity on how to implement feature flag if a need arises."}),"\n"]})]})}function c(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},54821:(e,n,s)=>{s.d(n,{A:()=>r});const r=s.p+"assets/images/tbd-release-from-branch-d05312337aa9ea3fd9044a378ce64b78.jpg"},28453:(e,n,s)=>{s.d(n,{R:()=>i,x:()=>a});var r=s(96540);const l={},t=r.createContext(l);function i(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:i(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);
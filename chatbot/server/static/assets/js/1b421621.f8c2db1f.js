"use strict";(self.webpackChunksudeeparyan_knowledgebase=self.webpackChunksudeeparyan_knowledgebase||[]).push([[8302],{27276:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>h,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var t=i(74848),s=i(28453);const o={},r="Continuous Integration (CI)",l={id:"DevOps/ContinousIntergration/ContinousIntergration",title:"Continuous Integration (CI)",description:"[[TOC]]",source:"@site/docs/DevOps/ContinousIntergration/ContinousIntergration.md",sourceDirName:"DevOps/ContinousIntergration",slug:"/DevOps/ContinousIntergration/",permalink:"/docs/DevOps/ContinousIntergration/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"devOpsSidebar",previous:{title:"ContinousIntergration",permalink:"/docs/category/continousintergration"},next:{title:"Docker",permalink:"/docs/category/docker"}},a={},c=[{value:"Understanding",id:"understanding",level:2},{value:"Overview",id:"overview",level:3},{value:"Why?",id:"why",level:3},{value:"What will be the impacts of CI?",id:"what-will-be-the-impacts-of-ci",level:3},{value:"Customer Impact",id:"customer-impact",level:4},{value:"Team Impact",id:"team-impact",level:4},{value:"Utilization Impact",id:"utilization-impact",level:4},{value:"Key differences between Continuous Integration (CI), Continuous Deployment (CD) and Continuous Delivery",id:"key-differences-between-continuous-integration-ci-continuous-deployment-cd-and-continuous-delivery",level:3},{value:"Pre-requisites for effectiveness",id:"pre-requisites-for-effectiveness",level:3},{value:"Risks of not following",id:"risks-of-not-following",level:3},{value:"Implementation",id:"implementation",level:2},{value:"Stage 1 - Automate in local",id:"stage-1---automate-in-local",level:3},{value:"Stage 2 - Setup pipelines",id:"stage-2---setup-pipelines",level:3},{value:"Stage 3 - Report &amp; Fix",id:"stage-3---report--fix",level:3},{value:"Non-negotiable items",id:"non-negotiable-items",level:3}];function d(e){const n={a:"a",blockquote:"blockquote",br:"br",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",img:"img",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.header,{children:(0,t.jsx)(n.h1,{id:"continuous-integration-ci",children:"Continuous Integration (CI)"})}),"\n",(0,t.jsxs)(n.p,{children:["[[",(0,t.jsx)(n.em,{children:"TOC"}),"]]"]}),"\n",(0,t.jsx)(n.h2,{id:"understanding",children:"Understanding"}),"\n",(0,t.jsx)(n.h3,{id:"overview",children:"Overview"}),"\n",(0,t.jsxs)(n.p,{children:["Continuous Integration (CI) is the practice of frequently integrating code",(0,t.jsx)(n.br,{}),"\n","changes and running automated tests. Understand in detail\n",(0,t.jsx)(n.a,{href:"https://dora.dev/devops-capabilities/technical/continuous-integration/",children:"here"}),"\nbefore proceeding."]}),"\n",(0,t.jsx)(n.h3,{id:"why",children:"Why?"}),"\n",(0,t.jsx)(n.p,{children:"CI is considered to be one of the core engineering software practices\nbecause:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Integration issues can be detected very early and frequently"}),"\n",(0,t.jsx)(n.li,{children:"Fast feedback loop on impact of current code changes to other code modules"}),"\n",(0,t.jsx)(n.li,{children:"Automated checks to ensure consistent code quality before it goes into main\nsource code"}),"\n",(0,t.jsx)(n.li,{children:"Better builds and artifactory management"}),"\n"]}),"\n",(0,t.jsxs)(n.p,{children:["CI is primarily becoming a need to have to succeed in today's market conditions.\nThis is evident from below distribution of research data from\n",(0,t.jsx)(n.a,{href:"https://cloud.google.com/devops/state-of-devops",children:"State of DevOps Report 2023"}),".\nThe distribution denotes that already more than half of software organizations\nhave modified their operations to include CI."]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Mean - Average value of whole data"}),"\n",(0,t.jsx)(n.li,{children:"Median - The middle value in a distribution of data. If it is dramatically\ndifferent from the mean, it might indicate that the data is skewed"}),"\n",(0,t.jsx)(n.li,{children:"Inter Quartile Range (IQR) - By giving you the two numbers (25th and 75th\npercentiles) where the middle 50% of the data resides, these boundaries should\nhelp convey the spread of responses."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"CI DORA Research Data",src:i(67844).A+"",width:"346",height:"309"})}),"\n",(0,t.jsx)(n.h3,{id:"what-will-be-the-impacts-of-ci",children:"What will be the impacts of CI?"}),"\n",(0,t.jsx)(n.h4,{id:"customer-impact",children:"Customer Impact"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Short Term - Increase in delivery speed of business features without\ncompromising quality"}),"\n",(0,t.jsx)(n.li,{children:"Long Term - Confidence in software quality & releasability having complex\nintegrated modules"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"team-impact",children:"Team Impact"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Short Term - Forget manual effort of creating builds, running tests or static\ncode analysis checks at regular intervals"}),"\n",(0,t.jsx)(n.li,{children:"Long Term - Enhanced collaboration, team cohesion and satisfaction as\nintegration hassles are significantly reduced"}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"utilization-impact",children:"Utilization Impact"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Short Term - More development time & less integration issues debugging time\n(which are hard to trace back)"}),"\n",(0,t.jsx)(n.li,{children:"Long Term - Increase in effective utilization directly contributing to\nrevenue, quality while saving time"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"key-differences-between-continuous-integration-ci-continuous-deployment-cd-and-continuous-delivery",children:"Key differences between Continuous Integration (CI), Continuous Deployment (CD) and Continuous Delivery"}),"\n",(0,t.jsxs)(n.p,{children:["Continuous Integration (CI) focuses on automating the integration and validation\nof code changes, while Continuous Deployment (CD) automatically deploys every\nsuccessful code change to production without manual intervention.\n",(0,t.jsx)(n.img,{alt:"Difference between CI and CD",src:i(57926).A+"",width:"1265",height:"848"})]}),"\n",(0,t.jsx)(n.p,{children:"Continuous delivery is commonly conflated with continuous deployment, but they\nare separate practices. Continuous deployment is when teams try to deploy every\ncode change to production as soon as possible. Continuous deployment works well\nfor web services, but can\u2019t be applied to software such as firmware or mobile\napps. Continuous delivery is applied to all kinds of software including firmware\nand mainframe systems, and in highly regulated environments."}),"\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.img,{alt:"Difference between CI and CDs",src:i(77225).A+"",width:"1767",height:"920"})}),"\n",(0,t.jsx)(n.p,{children:"As you acknowledge from the above differences, CI phase stops with build & test."}),"\n",(0,t.jsx)(n.h3,{id:"pre-requisites-for-effectiveness",children:"Pre-requisites for effectiveness"}),"\n",(0,t.jsx)(n.p,{children:"Trunk based development enhances CI practice's effectiveness. It helps to commit\nsmall code batches across all modules into one central trunk, thereby enabling\nincrementally small integration steps. In a way trunk based development is also\na required practice for effective continuous integration"}),"\n",(0,t.jsxs)(n.p,{children:["For more details refer to\n",(0,t.jsx)(n.a,{href:"https://dora.dev/devops-capabilities/technical/trunk-based-development/",children:"DORA's trunk based development practice"})]}),"\n",(0,t.jsx)(n.h3,{id:"risks-of-not-following",children:"Risks of not following"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["\u26d4"," Failing to follow CI can lead to"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Infrequent integration that leads to quality issues"}),"\n",(0,t.jsx)(n.li,{children:"Broken or unusable application state"}),"\n",(0,t.jsx)(n.li,{children:"Delayed defects discovery"}),"\n",(0,t.jsx)(n.li,{children:"Difficult merges and overall slower development"}),"\n",(0,t.jsx)(n.li,{children:"Poor developer productivity"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["\u26a0\ufe0f"," ",(0,t.jsx)(n.strong,{children:"Note:"})]}),"\n",(0,t.jsx)(n.p,{children:"When starting to adopt CI, Tech Lead should take care of the following,"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Mindset shift for identifying integration issues early rather than\naddressing just before release"}),"\n",(0,t.jsx)(n.li,{children:"Understanding current setup to identify pain points"}),"\n",(0,t.jsx)(n.li,{children:"Deciding what level of CI is needed in my project based on pain points"}),"\n",(0,t.jsx)(n.li,{children:"Educating and aligning with customers on CI"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h2,{id:"implementation",children:"Implementation"}),"\n",(0,t.jsx)(n.p,{children:"Following are the typical stages in CI, which can be adjusted based on project\nneeds"}),"\n",(0,t.jsx)(n.h3,{id:"stage-1---automate-in-local",children:"Stage 1 - Automate in local"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["\ud83c\udfc1"," Focus on automating build creation, test runs and lint checks\nlocally"]}),"\n"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Ensure that build command is available for packaging, otherwise create an\nautomated build script"}),"\n",(0,t.jsx)(n.li,{children:"Existing manual test cases should be converted into automated test cases -\nunit, integration or acceptance tests"}),"\n",(0,t.jsxs)(n.li,{children:["Install & setup static code analysis\ntools for:","\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"Linting"}),"\n",(0,t.jsx)(n.li,{children:"Formatting"}),"\n",(0,t.jsx)(n.li,{children:"Spelling checks for documentation"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Install & setup security vulnerability scan tools\n(",(0,t.jsx)(n.a,{href:"https://docs.npmjs.com/cli/v10/commands/npm-audit",children:"npm audit example"}),")"]}),"\n",(0,t.jsx)(n.li,{children:"Get builds, configuration, automated tests, static code analysis checks,\nsecurity vulnerability scans - Command Line Interface (CLI) ready in local\nsetup"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"stage-2---setup-pipelines",children:"Stage 2 - Setup pipelines"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["\ud83c\udfc1"," Focus on setting up pipeline triggers before and after PR\nmerges"]}),"\n"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["Setup pipeline in projects using CI tools for the platform\n(",(0,t.jsx)(n.a,{href:"https://learn.microsoft.com/en-us/azure/devops/pipelines/create-first-pipeline?view=azure-devops&tabs=java%2Ctfs-2018-2%2Cbrowser#prerequisites---azure-devops",children:"AzDO pipelines"}),",\n",(0,t.jsx)(n.a,{href:"https://docs.github.com/en/actions/quickstart",children:"Github Actions"}),", Travis CI,\nJenkins, etc.)"]}),"\n",(0,t.jsxs)(n.li,{children:["Create CI workflow scripts in the chosen tool to:","\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Trigger creation of build artifacts & packages"}),"\n",(0,t.jsx)(n.li,{children:"Run automated tests (Parallelize test execution wherever possible)"}),"\n",(0,t.jsx)(n.li,{children:"Run Linting, spell checking, formatting"}),"\n",(0,t.jsx)(n.li,{children:"Run security vulnerability scans"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["Publish builds and other artifacts to artifact repositories to manage\nversions and disaster recovery","\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Azure Artifacts"}),"\n",(0,t.jsx)(n.li,{children:"Github Actions Artifacts"}),"\n",(0,t.jsx)(n.li,{children:"JFrog"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"Establish a process within team to write automated tests for each PR to cover\nthe scope of developed code in that PR"}),"\n",(0,t.jsxs)(n.li,{children:["Setup triggers to run CI pipeline:","\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"When a new PR is created and for each new commits to that PR"}),"\n",(0,t.jsx)(n.li,{children:"After the PR is merged to main/trunk"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.li,{children:"PR merges should be blocked on any CI pipeline failure"}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"stage-3---report--fix",children:"Stage 3 - Report & Fix"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["\ud83c\udfc1"," Focus on reporting and fixing the pipeline failures"]}),"\n"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Setup below notification alerts on pipeline failures. Let's take example of\nAzDO:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Setup dashboards for analyzing pipeline (or) build health over a period\n(say last 15 days)"}),"\n",(0,t.jsx)(n.li,{children:"Setup email notifications to alert on pipeline failures"}),"\n",(0,t.jsx)(n.li,{children:"Setup Microsoft teams notifications to alert on pipeline failure"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"On failure, focus on fixing the issue first before proceeding."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Do not ignore any intermittent test failures through re-run and merge.\nIdentify root cause promptly and fix them"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Do not ignore random build failures. Again identify root cause promptly and\nfix them"}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"CI output logs should be developer friendly to narrow down to root cause\nsooner"}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"non-negotiable-items",children:"Non-negotiable items"}),"\n",(0,t.jsx)(n.p,{children:"To ensure the success of the Continuous Integration (CI) process, certain\nnon-negotiable should be adhered to across the mentioned stages:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Version control to check-in repository files"}),"\n",(0,t.jsxs)(n.li,{children:["Compile time extensions in local for automatic error highlighting and fixing:","\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Static Code Analyzer Extensions"}),"\n",(0,t.jsx)(n.li,{children:"Code Formatting Extensions"}),"\n",(0,t.jsx)(n.li,{children:"Documentation Formatting Extensions - Markdown"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["1 CI pipeline for code modules which runs:","\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Automated tests for each PR"}),"\n",(0,t.jsx)(n.li,{children:"Creation of build packages"}),"\n",(0,t.jsx)(n.li,{children:"Static code analyzer checks"}),"\n",(0,t.jsx)(n.li,{children:"Security scanning for vulnerabilities"}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["1 CI pipeline for documentation which runs:","\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Lint checks"}),"\n",(0,t.jsx)(n.li,{children:"Formatting checks"}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsxs)(n.p,{children:["\u26a0\ufe0f"," ",(0,t.jsx)(n.strong,{children:"Note:"})," In scenarios such as"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Non-availability of security scanning tools for LabVIEW"}),"\n",(0,t.jsx)(n.li,{children:"Non-availability of documentation inside repository, etc."}),"\n"]}),"\n",(0,t.jsx)(n.p,{children:"Project tech leads can have conversation with Cohort Leads to take exception\nfrom the above non-negotiable list as needed. However any tools that needs to\nbe developed for technical improvement, will be captured in corresponding\nproject backlog or TechOps team's backlog after minimal definition, analysis\nand ball park estimate to get an exception."}),"\n"]}),"\n",(0,t.jsx)(n.h1,{id:"frequently-asked-questions-faqs",children:"Frequently Asked Questions (FAQs)"}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"CI 001 - How much time is needed for setting up CI pipeline? Is it one time\nor recurring investment?"})}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Time required to create a new CI pipeline can vary depending on the complexity\nof the project and the tools used. AzDO pipelines and GitHub Actions are\npopular tools for building CI/CD pipelines, and it is known for its ease of\nuse and simplicity. One-time investment includes the time required to set up\nthe pipeline initially, while the recurring investment includes the time\nrequired to maintain and update the pipeline."}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsx)(n.li,{children:"One-time investment - Typically it would take few days - few weeks per\npipeline setup initially. And a project can have many pipelines setup for\ndifferent modules across code files, documentation files, etc."}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"CI 002 - What are some common pitfalls when starting to adopt CI?"})}),"\n"]}),"\n",(0,t.jsxs)(n.ul,{children:["\n",(0,t.jsxs)(n.li,{children:["DORA Continuous integration practice has a good list of\n",(0,t.jsx)(n.a,{href:"https://dora.dev/devops-capabilities/technical/continuous-integration/#common-pitfalls",children:"common pitfalls"}),"\nthat can affect adoption of CI"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{}),"\n",(0,t.jsxs)(n.blockquote,{children:["\n",(0,t.jsx)(n.p,{children:(0,t.jsx)(n.strong,{children:"CI 003 - What are some common challenges when starting CI and how can I\novercome them?"})}),"\n"]}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"Mindset shift"})," - Adopting a CI/CD pipeline requires a culture shift, and it\ncan be challenging to ensure that everyone on the team is aligned with the\nnew approach. It is important to ensure that everyone understands the\nbenefits of the pipeline and is committed to making it work"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"Large project dilemma"})," - A single CI/CD pipeline is often not recommended\nfor a large project, especially those that are developed on a global level in\nbig companies. In such cases, it is recommended to break down the project\ninto smaller components and create separate pipelines for each component"]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"Resource Management"})," - Resource management is generally not an issue while\nworking on a smaller project. However, as the project grows, it becomes\nincreasingly important to manage resources effectively. This includes\nmanaging the number of build agents, parallel builds, and other resources. We\ncan align with customers' central team and internal TechOps team to sort out\nthese issues on a case by case basis."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)(n.em,{children:"Lack of expertise"})," - CI/CD pipelines require a certain level of expertise to\nset up and maintain. Teams may face challenges if they do not have the\nnecessary skills or experience to work with the tools used in the pipeline.\nWe can take help and guidance from TechOps team to overcome this challenge\nbased on project size and complexity"]}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.hr,{})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(d,{...e})}):d(e)}},77225:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/ci-difference-btw-ci-cds-04f398f542cacd50bc7e95fbfcc7646c.png"},57926:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/ci-difference_btw-ci-cd-2f5afc868921eb69ceed0596c55a4697.png"},67844:(e,n,i)=>{i.d(n,{A:()=>t});const t=i.p+"assets/images/ci-dora-research-349eb46b9cd6422d421369eab8e6cd8f.png"},28453:(e,n,i)=>{i.d(n,{R:()=>r,x:()=>l});var t=i(96540);const s={},o=t.createContext(s);function r(e){const n=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(o.Provider,{value:n},e.children)}}}]);
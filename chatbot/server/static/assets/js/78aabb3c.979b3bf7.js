"use strict";(self.webpackChunksudeeparyan_knowledgebase=self.webpackChunksudeeparyan_knowledgebase||[]).push([[8462],{76077:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>o,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>l,toc:()=>d});var t=a(74848),s=a(28453);const r={},i=void 0,l={id:"RAG360/Retrieval/Structured/PandasSQL",title:"PandasSQL",description:"What is Pandas SQL?",source:"@site/docs/RAG360/Retrieval/Structured/PandasSQL.md",sourceDirName:"RAG360/Retrieval/Structured",slug:"/RAG360/Retrieval/Structured/PandasSQL",permalink:"/docs/RAG360/Retrieval/Structured/PandasSQL",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"ragSidebar",previous:{title:"Overview",permalink:"/docs/RAG360/Retrieval/Structured/Overview"},next:{title:"PandasLLM",permalink:"/docs/RAG360/Retrieval/Structured/PandasLLM"}},o={},d=[{value:"What is Pandas SQL?",id:"what-is-pandas-sql",level:3},{value:"<strong>Explanation</strong>",id:"explanation",level:4},{value:"Why We Need Pandas SQL",id:"why-we-need-pandas-sql",level:3},{value:"<strong>Problem Statement</strong>",id:"problem-statement",level:4},{value:"<strong>Use Cases</strong>",id:"use-cases",level:4},{value:"<strong>Benefits</strong>",id:"benefits",level:4},{value:"Advantages and Disadvantages",id:"advantages-and-disadvantages",level:3},{value:"<strong>Advantages</strong>",id:"advantages",level:4},{value:"<strong>Disadvantages</strong>",id:"disadvantages",level:4},{value:"Example",id:"example",level:3},{value:"<strong>Output</strong>",id:"output",level:4}];function h(e){const n={code:"code",h3:"h3",h4:"h4",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h3,{id:"what-is-pandas-sql",children:"What is Pandas SQL?"}),"\n",(0,t.jsx)(n.h4,{id:"explanation",children:(0,t.jsx)(n.strong,{children:"Explanation"})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Pandas SQL involves the utilization of SQL syntax or SQL-like queries within\nthe context of Python's Pandas library to manipulate structured data directly\nfrom DataFrames."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsxs)(n.p,{children:["Pandas does not inherently support SQL; however, there are tools and\nlibraries such as ",(0,t.jsx)(n.code,{children:"pandasql"})," or integrations with databases through\nSQLAlchemy that allow SQL-style querying on DataFrame objects."]}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"This technique enables users who are familiar with SQL to apply similar query\nlogic to manipulate, filter, or transform data in DataFrames without\ntransitioning away from the Python ecosystem."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Employing Pandas SQL facilitates the blending of structured data handling\nwith Python's analytical capabilities, thus enhancing data retrieval\nprocesses from structured sources like databases or spreadsheets."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"It fits into the broader picture of structured retrieval by providing a\nflexible and powerful tool for data analysis within the Python environment,\nparticularly beneficial where complex data transformations and aggregations\nare required."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h3,{id:"why-we-need-pandas-sql",children:"Why We Need Pandas SQL"}),"\n",(0,t.jsx)(n.h4,{id:"problem-statement",children:(0,t.jsx)(n.strong,{children:"Problem Statement"})}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Handling large datasets often requires sophisticated data filtering,\ntransformation, and analysis that go beyond basic DataFrame operations."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Traditional Python operations on Pandas DataFrames, although powerful, might\nnot always be intuitive for those accustomed to SQL."}),"\n"]}),"\n",(0,t.jsxs)(n.li,{children:["\n",(0,t.jsx)(n.p,{children:"Moreover, translating complex logic into Pandas operations can sometimes\nbecome verbose and hard to maintain."}),"\n"]}),"\n"]}),"\n",(0,t.jsx)(n.h4,{id:"use-cases",children:(0,t.jsx)(n.strong,{children:"Use Cases"})}),"\n",(0,t.jsxs)("table",{class:"table-size-for-cloud-services",children:[(0,t.jsx)("thead",{children:(0,t.jsxs)("tr",{children:[(0,t.jsx)("th",{children:"Factors"}),(0,t.jsx)("th",{children:"Reason"})]})}),(0,t.jsxs)("tbody",{children:[(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:(0,t.jsx)("span",{class:"custom-header",children:"Data Analysis"})}),(0,t.jsx)("td",{children:"Quickly running ad-hoc queries on large DataFrames."})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:(0,t.jsx)("span",{class:"custom-header",children:"Data Transformation"})}),(0,t.jsx)("td",{children:"Implementing complex data transformations easily using SQL syntax."})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:(0,t.jsx)("span",{class:"custom-header",children:"Integration Testing"})}),(0,t.jsx)("td",{children:"Simplifying the process of testing by using SQL queries directly on DataFrames to replicate database states and operations during testing phases."})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"benefits",children:(0,t.jsx)(n.strong,{children:"Benefits"})}),"\n",(0,t.jsxs)("table",{class:"table-size-for-cloud-services",children:[(0,t.jsx)("thead",{children:(0,t.jsxs)("tr",{children:[(0,t.jsx)("th",{children:"Factors"}),(0,t.jsx)("th",{children:"Reason"})]})}),(0,t.jsxs)("tbody",{children:[(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:(0,t.jsx)("span",{class:"custom-header",children:"Leveraging SQL Expertise"})}),(0,t.jsx)("td",{children:"Allows users proficient in SQL to directly apply their knowledge."})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:(0,t.jsx)("span",{class:"custom-header",children:"Enhanced Readability and Maintainability"})}),(0,t.jsx)("td",{children:"SQL queries can be more readable and easier to maintain than complex Pandas operations."})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:(0,t.jsx)("span",{class:"custom-header",children:"Unified Data Manipulation Language"})}),(0,t.jsx)("td",{children:"Users can manipulate data in Pandas similar to how they would in a relational database."})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"advantages-and-disadvantages",children:"Advantages and Disadvantages"}),"\n",(0,t.jsx)(n.h4,{id:"advantages",children:(0,t.jsx)(n.strong,{children:"Advantages"})}),"\n",(0,t.jsxs)("table",{class:"table-size-for-cloud-services",children:[(0,t.jsx)("thead",{children:(0,t.jsxs)("tr",{children:[(0,t.jsx)("th",{children:"Factors"}),(0,t.jsx)("th",{children:"Reason"})]})}),(0,t.jsxs)("tbody",{children:[(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:(0,t.jsx)("span",{class:"custom-header",children:"Efficiency"})}),(0,t.jsx)("td",{children:"Enables quicker modifications and querying of DataFrames using SQL, which is especially beneficial for users familiar with SQL."})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:(0,t.jsx)("span",{class:"custom-header",children:"Understanding"})}),(0,t.jsx)("td",{children:"SQL as a declarative language can make complex data manipulations easier to understand and implement."})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:(0,t.jsx)("span",{class:"custom-header",children:"Scalability"})}),(0,t.jsx)("td",{children:"Useful in scenarios where SQL-like processing is required before additional Pythonic analysis."})]})]})]}),"\n",(0,t.jsx)(n.h4,{id:"disadvantages",children:(0,t.jsx)(n.strong,{children:"Disadvantages"})}),"\n",(0,t.jsxs)("table",{class:"table-size-for-cloud-services",children:[(0,t.jsx)("thead",{children:(0,t.jsxs)("tr",{children:[(0,t.jsx)("th",{children:"Factors"}),(0,t.jsx)("th",{children:"Reason"})]})}),(0,t.jsxs)("tbody",{children:[(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:(0,t.jsx)("span",{class:"custom-header",children:"Complexity"})}),(0,t.jsxs)("td",{children:["Introduces a layer of complexity as it requires learning or integrating additional tools like ",(0,t.jsx)("code",{children:"pandasql"})," or ",(0,t.jsx)("code",{children:"SQLAlchemy"}),"."]})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:(0,t.jsx)("span",{class:"custom-header",children:"Resource Usage"})}),(0,t.jsx)("td",{children:"Might lead to higher memory usage if not handled properly, especially with large data sets."})]}),(0,t.jsxs)("tr",{children:[(0,t.jsx)("td",{children:(0,t.jsx)("span",{class:"custom-header",children:"Limitations"})}),(0,t.jsx)("td",{children:"While SQL-like, it may not support all features of SQL or may handle operations differently, leading to unexpected results."})]})]})]}),"\n",(0,t.jsx)(n.h3,{id:"example",children:"Example"}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"# you will have the employee_data dataframe in local memory\n# Refer the previous example for the dataframe\n\nfrom langchain import PromptTemplate\nfrom langchain.chains import LLMChain\n\nAVAILABILITY_SQL_QUERY_GENERATOR_PROMPT = \"\"\"\nSystem:\nYou act as an expert in writing SQL queries based on the context. Try to provide simple SQL queries\n\nRules for generating Queries:\n- Write SQL queries based on the context.\n- Extract the same column names as described in the headers.\n- The header (column name) must always be enclosed in double quotes in the query.\n- The SQL query should be in a standard format that supports the PANDASQL library in Python.\n- Always use 'LIKE' SQL query with '%' for the employee_name column search.\n- For months, use the format (%b-%Y) (e.g., Jan-2024).\n- The month columns will have availability percentages ranging from 0% to 100%.\n- The SQL query should always contain employee_name, employee_id, email, engineer_role, mission_assigned, technology columns for any type of context .\n- If the context is about availability, include the respective months in the SQL query.\n- Use the short forms for technology column search. Short forms are labview - LV, angular - Angular, fpga - FPGA, teststand - TS, c# - C#, python - Python, machine learning - ML, database - DB, marketing - Marketing, sales - Sales, web technology - WT, testing or test - Test, ui/ux - UI/UX, react - React, gc - GC, catalyst - Catalyst, leave - Leave, general - General, kss - KSS.\n- Use 'StartsWith' SQL query for the engineer_role column search if any engineer role is mentioned in the context from this list {engineer_role}.\n- Do not use technologies for the engineer_role column search.\n- If the context is about availability and the question has either <after> or <from> particular month then provide 6 consecutive months' availability.\n- These are the quarters\n    - Apr, May, Jun - First Quarter\n    - Jul, Aug, Sep - Second Quarter\n    - Oct, Nov, Dec - Third Quarter\n    - Jan, Feb, Mar - Fourth Quarter\n\nYou have a dataframe in Python with the name \"employees_availability_data\". The dataframe contains information about Employee details.\n\nThe data frame has the following headers:\nemployee_name - Name of the employee\nemployee_id - ID of the employee\nemail - Email address of the employee\nengineer_role - Project role or designation of the employee.\nmission_assigned - Mission in which the employee is assigned to\ntechnology - The Technolog(s) which is(are) known in the project\nJan-yyyy - The availability of the employee for January month. 'yyyy' represents year.\nFeb-yyyy - The availability of the employee for February month. 'yyyy' represents year.\nMar-yyyy - The availability of the employee for March month. 'yyyy' represents year.\nApr-yyyy - The availability of the employee for April month. 'yyyy' represents year.\nMay-yyyy - The availability of the employee for May month. 'yyyy' represents year.\nJun-yyyy - The availability of the employee for June month. 'yyyy' represents year.\nJul-yyyy - The availability of the employee for July month. 'yyyy' represents year.\nAug-yyyy - The availability of the employee for August month. 'yyyy' represents year.\nSep-yyyy - The availability of the employee for September month. 'yyyy' represents year.\nOct-yyyy - The availability of the employee for October month. 'yyyy' represents year.\nNov-yyyy - The availability of the employee for November month. 'yyyy' represents year.\nDec-yyyy - The availability of the employee for December month. 'yyyy' represents year.\n\nThe 12 columns next to technology column are months. The consecutive month column to the technology column will be the first month and Use present year for 'yyyy'.\n\nPresent_month_year:\n<present_month_year>{present_month_year}</present_month_year>\n\nContext (enclosed in a XML tag below) :\n<context>user: {context}</context>\n\nSQL Query Template:\nSELECT \"employee_name\", \"employee_id\", \"email\", \"engineer_role\", \"mission_assigned\", \"technology\" \"<respective months>\"\nFROM employee_availability_data\n\"\"\"\n\navailability_sql_query_generator_prompt_template = PromptTemplate(\n    input_variables=[\"context\",\"engineer_role\",\"present_month_year\"],\n    template=AVAILABILITY_SQL_QUERY_GENERATOR_PROMPT,\n    validate_template=False,\n)\n\n\navailability_sql_query_generator = LLMChain(\n    llm=ChatLLM,\n    prompt=availability_sql_query_generator_prompt_template\n    )\n"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:'query = "What is the employee id of Sanjay?";\n\nsql_query = availability_sql_query_generator.run({\n  context: query,\n  engineer_role: engineerroles.values(),\n  present_month_year: date.strftime("%b-%Y"),\n});\nprint(sql_query);\n'})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"from pandasql import sqldf\noutput = sqldf(sql_query)\noutput\n"})}),"\n",(0,t.jsx)(n.h4,{id:"output",children:(0,t.jsx)(n.strong,{children:"Output"})}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-js",children:"OUTPUT: Query: 'SELECT \"employee_id\" FROM employees_availability_data WHERE \"employee_name\" LIKE \\'%Sanjay%\\'';\nOutput: 1655;\n"})}),"\n",(0,t.jsx)(n.p,{children:"By understanding and effectively deploying Pandas SQL in scenarios involving\ncomplex data operations, organizations can leverage both Python\u2019s powerful data\nmanipulation features alongside the intuitive and widely used SQL syntax, making\ntheir data retrieval and analysis processes more robust and efficient."})]})}function c(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(h,{...e})}):h(e)}},28453:(e,n,a)=>{a.d(n,{R:()=>i,x:()=>l});var t=a(96540);const s={},r=t.createContext(s);function i(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);